# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]


# Feedback types

class FeedbackOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Feedback create method"""


class FeedbackCreateInput(FeedbackOptionalCreateInput):
    """Required arguments to the Feedback create method"""
    email: _str
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class FeedbackOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Feedback create method, without relations"""


class FeedbackCreateWithoutRelationsInput(FeedbackOptionalCreateWithoutRelationsInput):
    """Required arguments to the Feedback create method, without relations"""
    email: _str
    content: _str


class FeedbackCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'FeedbackCreateWithoutRelationsInput'
    connect: 'FeedbackWhereUniqueInput'


class FeedbackCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['FeedbackCreateWithoutRelationsInput', List['FeedbackCreateWithoutRelationsInput']]
    connect: Union['FeedbackWhereUniqueInput', List['FeedbackWhereUniqueInput']]


_FeedbackWhereUnique_email_Input = TypedDict(
    '_FeedbackWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

FeedbackWhereUniqueInput = _FeedbackWhereUnique_email_Input


class FeedbackUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    email: _str
    content: _str


class FeedbackUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    email: _str
    content: _str


class FeedbackUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['FeedbackCreateWithoutRelationsInput']
    connect: List['FeedbackWhereUniqueInput']
    set: List['FeedbackWhereUniqueInput']
    disconnect: List['FeedbackWhereUniqueInput']
    delete: List['FeedbackWhereUniqueInput']

    # TODO
    # update: List['FeedbackUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['FeedbackUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['FeedbackScalarWhereInput']
    # upsert: List['FeedbackUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['FeedbackCreateOrConnectWithoutRelationsInput']


class FeedbackUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'FeedbackCreateWithoutRelationsInput'
    connect: 'FeedbackWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'FeedbackUpdateInput'
    # upsert: 'FeedbackUpsertWithoutRelationsInput'
    # connectOrCreate: 'FeedbackCreateOrConnectWithoutRelationsInput'


class FeedbackUpsertInput(TypedDict):
    create: 'FeedbackCreateInput'
    update: 'FeedbackUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Feedback_email_OrderByInput = TypedDict(
    '_Feedback_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_Feedback_content_OrderByInput = TypedDict(
    '_Feedback_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

FeedbackOrderByInput = Union[
    '_Feedback_email_OrderByInput',
    '_Feedback_content_OrderByInput',
]



# recursive Feedback types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

FeedbackRelationFilter = TypedDict(
    'FeedbackRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class FeedbackListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class FeedbackInclude(TypedDict, total=False):
    """Feedback relational arguments"""


    

class FeedbackIncludeFromFeedback(TypedDict, total=False):
    """Relational arguments for Feedback"""


class FeedbackIncludeFromFeedbackRecursive1(TypedDict, total=False):
    """Relational arguments for Feedback"""


class FeedbackIncludeFromFeedbackRecursive2(TypedDict, total=False):
    """Relational arguments for Feedback"""


class FeedbackIncludeFromFeedbackRecursive3(TypedDict, total=False):
    """Relational arguments for Feedback"""


class FeedbackIncludeFromFeedbackRecursive4(TypedDict, total=False):
    """Relational arguments for Feedback"""

    

class FeedbackArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FeedbackArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FeedbackArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FeedbackArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FeedbackArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    
    

class FindManyFeedbackArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FindManyFeedbackArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FindManyFeedbackArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FindManyFeedbackArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FindManyFeedbackArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    
    

class GHDataIncludeFromFeedback(TypedDict, total=False):
    """Relational arguments for Feedback"""


class GHDataIncludeFromFeedbackRecursive1(TypedDict, total=False):
    """Relational arguments for Feedback"""


class GHDataIncludeFromFeedbackRecursive2(TypedDict, total=False):
    """Relational arguments for Feedback"""


class GHDataIncludeFromFeedbackRecursive3(TypedDict, total=False):
    """Relational arguments for Feedback"""


class GHDataIncludeFromFeedbackRecursive4(TypedDict, total=False):
    """Relational arguments for Feedback"""

    

class GHDataArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'GHDataIncludeFromGHDataRecursive1'


class GHDataArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'GHDataIncludeFromGHDataRecursive2'


class GHDataArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'GHDataIncludeFromGHDataRecursive3'


class GHDataArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'GHDataIncludeFromGHDataRecursive4'


class GHDataArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    
    

class FindManyGHDataArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive1'


class FindManyGHDataArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive2'


class FindManyGHDataArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive3'


class FindManyGHDataArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive4'


class FindManyGHDataArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    
    

class KnowledgeBaseIncludeFromFeedback(TypedDict, total=False):
    """Relational arguments for Feedback"""


class KnowledgeBaseIncludeFromFeedbackRecursive1(TypedDict, total=False):
    """Relational arguments for Feedback"""


class KnowledgeBaseIncludeFromFeedbackRecursive2(TypedDict, total=False):
    """Relational arguments for Feedback"""


class KnowledgeBaseIncludeFromFeedbackRecursive3(TypedDict, total=False):
    """Relational arguments for Feedback"""


class KnowledgeBaseIncludeFromFeedbackRecursive4(TypedDict, total=False):
    """Relational arguments for Feedback"""

    

class KnowledgeBaseArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive1'


class KnowledgeBaseArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive2'


class KnowledgeBaseArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive3'


class KnowledgeBaseArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive4'


class KnowledgeBaseArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    
    

class FindManyKnowledgeBaseArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive1'


class FindManyKnowledgeBaseArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive2'


class FindManyKnowledgeBaseArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive3'


class FindManyKnowledgeBaseArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive4'


class FindManyKnowledgeBaseArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    
    

class UserIncludeFromFeedback(TypedDict, total=False):
    """Relational arguments for Feedback"""


class UserIncludeFromFeedbackRecursive1(TypedDict, total=False):
    """Relational arguments for Feedback"""


class UserIncludeFromFeedbackRecursive2(TypedDict, total=False):
    """Relational arguments for Feedback"""


class UserIncludeFromFeedbackRecursive3(TypedDict, total=False):
    """Relational arguments for Feedback"""


class UserIncludeFromFeedbackRecursive4(TypedDict, total=False):
    """Relational arguments for Feedback"""

    

class UserArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    
    

class FindManyUserArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserInsightsIncludeFromFeedback(TypedDict, total=False):
    """Relational arguments for Feedback"""


class UserInsightsIncludeFromFeedbackRecursive1(TypedDict, total=False):
    """Relational arguments for Feedback"""


class UserInsightsIncludeFromFeedbackRecursive2(TypedDict, total=False):
    """Relational arguments for Feedback"""


class UserInsightsIncludeFromFeedbackRecursive3(TypedDict, total=False):
    """Relational arguments for Feedback"""


class UserInsightsIncludeFromFeedbackRecursive4(TypedDict, total=False):
    """Relational arguments for Feedback"""

    

class UserInsightsArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive1'


class UserInsightsArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive2'


class UserInsightsArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive3'


class UserInsightsArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive4'


class UserInsightsArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    
    

class FindManyUserInsightsArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive1'


class FindManyUserInsightsArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive2'


class FindManyUserInsightsArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive3'


class FindManyUserInsightsArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive4'


class FindManyUserInsightsArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    
    

class UserOnboardIncludeFromFeedback(TypedDict, total=False):
    """Relational arguments for Feedback"""


class UserOnboardIncludeFromFeedbackRecursive1(TypedDict, total=False):
    """Relational arguments for Feedback"""


class UserOnboardIncludeFromFeedbackRecursive2(TypedDict, total=False):
    """Relational arguments for Feedback"""


class UserOnboardIncludeFromFeedbackRecursive3(TypedDict, total=False):
    """Relational arguments for Feedback"""


class UserOnboardIncludeFromFeedbackRecursive4(TypedDict, total=False):
    """Relational arguments for Feedback"""

    

class UserOnboardArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive1'


class UserOnboardArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive2'


class UserOnboardArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive3'


class UserOnboardArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive4'


class UserOnboardArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    
    

class FindManyUserOnboardArgsFromFeedback(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive1'


class FindManyUserOnboardArgsFromFeedbackRecursive1(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive2'


class FindManyUserOnboardArgsFromFeedbackRecursive2(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive3'


class FindManyUserOnboardArgsFromFeedbackRecursive3(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive4'


class FindManyUserOnboardArgsFromFeedbackRecursive4(TypedDict, total=False):
    """Arguments for Feedback"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    


FindManyFeedbackArgs = FindManyFeedbackArgsFromFeedback
FindFirstFeedbackArgs = FindManyFeedbackArgsFromFeedback


    

class FeedbackWhereInput(TypedDict, total=False):
    """Feedback arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['FeedbackWhereInputRecursive1', List['FeedbackWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['FeedbackWhereInputRecursive1']
    OR: List['FeedbackWhereInputRecursive1']
    NOT: List['FeedbackWhereInputRecursive1']


class FeedbackWhereInputRecursive1(TypedDict, total=False):
    """Feedback arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['FeedbackWhereInputRecursive2', List['FeedbackWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['FeedbackWhereInputRecursive2']
    OR: List['FeedbackWhereInputRecursive2']
    NOT: List['FeedbackWhereInputRecursive2']


class FeedbackWhereInputRecursive2(TypedDict, total=False):
    """Feedback arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['FeedbackWhereInputRecursive3', List['FeedbackWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['FeedbackWhereInputRecursive3']
    OR: List['FeedbackWhereInputRecursive3']
    NOT: List['FeedbackWhereInputRecursive3']


class FeedbackWhereInputRecursive3(TypedDict, total=False):
    """Feedback arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['FeedbackWhereInputRecursive4', List['FeedbackWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['FeedbackWhereInputRecursive4']
    OR: List['FeedbackWhereInputRecursive4']
    NOT: List['FeedbackWhereInputRecursive4']


class FeedbackWhereInputRecursive4(TypedDict, total=False):
    """Feedback arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']



# aggregate Feedback types


    

class FeedbackScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Feedback arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['FeedbackScalarWhereWithAggregatesInputRecursive1']
    OR: List['FeedbackScalarWhereWithAggregatesInputRecursive1']
    NOT: List['FeedbackScalarWhereWithAggregatesInputRecursive1']


class FeedbackScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Feedback arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['FeedbackScalarWhereWithAggregatesInputRecursive2']
    OR: List['FeedbackScalarWhereWithAggregatesInputRecursive2']
    NOT: List['FeedbackScalarWhereWithAggregatesInputRecursive2']


class FeedbackScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Feedback arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['FeedbackScalarWhereWithAggregatesInputRecursive3']
    OR: List['FeedbackScalarWhereWithAggregatesInputRecursive3']
    NOT: List['FeedbackScalarWhereWithAggregatesInputRecursive3']


class FeedbackScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Feedback arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['FeedbackScalarWhereWithAggregatesInputRecursive4']
    OR: List['FeedbackScalarWhereWithAggregatesInputRecursive4']
    NOT: List['FeedbackScalarWhereWithAggregatesInputRecursive4']


class FeedbackScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Feedback arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']



class FeedbackGroupByOutput(TypedDict, total=False):
    email: _str
    content: _str
    _sum: 'FeedbackSumAggregateOutput'
    _avg: 'FeedbackAvgAggregateOutput'
    _min: 'FeedbackMinAggregateOutput'
    _max: 'FeedbackMaxAggregateOutput'
    _count: 'FeedbackCountAggregateOutput'


class FeedbackAvgAggregateOutput(TypedDict, total=False):
    """Feedback output for aggregating averages"""


class FeedbackSumAggregateOutput(TypedDict, total=False):
    """Feedback output for aggregating sums"""


class FeedbackScalarAggregateOutput(TypedDict, total=False):
    """Feedback output including scalar fields"""
    email: _str
    content: _str


FeedbackMinAggregateOutput = FeedbackScalarAggregateOutput
FeedbackMaxAggregateOutput = FeedbackScalarAggregateOutput


class FeedbackMaxAggregateInput(TypedDict, total=False):
    """Feedback input for aggregating by max"""
    email: bool
    content: bool


class FeedbackMinAggregateInput(TypedDict, total=False):
    """Feedback input for aggregating by min"""
    email: bool
    content: bool


class FeedbackNumberAggregateInput(TypedDict, total=False):
    """Feedback input for aggregating numbers"""


FeedbackAvgAggregateInput = FeedbackNumberAggregateInput
FeedbackSumAggregateInput = FeedbackNumberAggregateInput


FeedbackCountAggregateInput = TypedDict(
    'FeedbackCountAggregateInput',
    {
        'email': bool,
        'content': bool,
        '_all': bool,
    },
    total=False,
)

FeedbackCountAggregateOutput = TypedDict(
    'FeedbackCountAggregateOutput',
    {
        'email': int,
        'content': int,
        '_all': int,
    },
    total=False,
)


FeedbackKeys = Literal[
    'email',
    'content',
]
FeedbackScalarFieldKeys = Literal[
    'email',
    'content',
]
FeedbackScalarFieldKeysT = TypeVar('FeedbackScalarFieldKeysT', bound=FeedbackScalarFieldKeys)

FeedbackRelationalFieldKeys = _NoneType

# GHData types

class GHDataOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the GHData create method"""


class GHDataCreateInput(GHDataOptionalCreateInput):
    """Required arguments to the GHData create method"""
    email: _str
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class GHDataOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the GHData create method, without relations"""


class GHDataCreateWithoutRelationsInput(GHDataOptionalCreateWithoutRelationsInput):
    """Required arguments to the GHData create method, without relations"""
    email: _str
    content: _str


class GHDataCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'GHDataCreateWithoutRelationsInput'
    connect: 'GHDataWhereUniqueInput'


class GHDataCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['GHDataCreateWithoutRelationsInput', List['GHDataCreateWithoutRelationsInput']]
    connect: Union['GHDataWhereUniqueInput', List['GHDataWhereUniqueInput']]


_GHDataWhereUnique_email_Input = TypedDict(
    '_GHDataWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

GHDataWhereUniqueInput = _GHDataWhereUnique_email_Input


class GHDataUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    email: _str
    content: _str


class GHDataUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    email: _str
    content: _str


class GHDataUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['GHDataCreateWithoutRelationsInput']
    connect: List['GHDataWhereUniqueInput']
    set: List['GHDataWhereUniqueInput']
    disconnect: List['GHDataWhereUniqueInput']
    delete: List['GHDataWhereUniqueInput']

    # TODO
    # update: List['GHDataUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['GHDataUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['GHDataScalarWhereInput']
    # upsert: List['GHDataUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['GHDataCreateOrConnectWithoutRelationsInput']


class GHDataUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'GHDataCreateWithoutRelationsInput'
    connect: 'GHDataWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'GHDataUpdateInput'
    # upsert: 'GHDataUpsertWithoutRelationsInput'
    # connectOrCreate: 'GHDataCreateOrConnectWithoutRelationsInput'


class GHDataUpsertInput(TypedDict):
    create: 'GHDataCreateInput'
    update: 'GHDataUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_GHData_email_OrderByInput = TypedDict(
    '_GHData_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_GHData_content_OrderByInput = TypedDict(
    '_GHData_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

GHDataOrderByInput = Union[
    '_GHData_email_OrderByInput',
    '_GHData_content_OrderByInput',
]



# recursive GHData types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

GHDataRelationFilter = TypedDict(
    'GHDataRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class GHDataListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class GHDataInclude(TypedDict, total=False):
    """GHData relational arguments"""


    

class FeedbackIncludeFromGHData(TypedDict, total=False):
    """Relational arguments for GHData"""


class FeedbackIncludeFromGHDataRecursive1(TypedDict, total=False):
    """Relational arguments for GHData"""


class FeedbackIncludeFromGHDataRecursive2(TypedDict, total=False):
    """Relational arguments for GHData"""


class FeedbackIncludeFromGHDataRecursive3(TypedDict, total=False):
    """Relational arguments for GHData"""


class FeedbackIncludeFromGHDataRecursive4(TypedDict, total=False):
    """Relational arguments for GHData"""

    

class FeedbackArgsFromGHData(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FeedbackArgsFromGHDataRecursive1(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FeedbackArgsFromGHDataRecursive2(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FeedbackArgsFromGHDataRecursive3(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FeedbackArgsFromGHDataRecursive4(TypedDict, total=False):
    """Arguments for GHData"""
    
    

class FindManyFeedbackArgsFromGHData(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FindManyFeedbackArgsFromGHDataRecursive1(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FindManyFeedbackArgsFromGHDataRecursive2(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FindManyFeedbackArgsFromGHDataRecursive3(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FindManyFeedbackArgsFromGHDataRecursive4(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    
    

class GHDataIncludeFromGHData(TypedDict, total=False):
    """Relational arguments for GHData"""


class GHDataIncludeFromGHDataRecursive1(TypedDict, total=False):
    """Relational arguments for GHData"""


class GHDataIncludeFromGHDataRecursive2(TypedDict, total=False):
    """Relational arguments for GHData"""


class GHDataIncludeFromGHDataRecursive3(TypedDict, total=False):
    """Relational arguments for GHData"""


class GHDataIncludeFromGHDataRecursive4(TypedDict, total=False):
    """Relational arguments for GHData"""

    

class GHDataArgsFromGHData(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'GHDataIncludeFromGHDataRecursive1'


class GHDataArgsFromGHDataRecursive1(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'GHDataIncludeFromGHDataRecursive2'


class GHDataArgsFromGHDataRecursive2(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'GHDataIncludeFromGHDataRecursive3'


class GHDataArgsFromGHDataRecursive3(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'GHDataIncludeFromGHDataRecursive4'


class GHDataArgsFromGHDataRecursive4(TypedDict, total=False):
    """Arguments for GHData"""
    
    

class FindManyGHDataArgsFromGHData(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive1'


class FindManyGHDataArgsFromGHDataRecursive1(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive2'


class FindManyGHDataArgsFromGHDataRecursive2(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive3'


class FindManyGHDataArgsFromGHDataRecursive3(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive4'


class FindManyGHDataArgsFromGHDataRecursive4(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    
    

class KnowledgeBaseIncludeFromGHData(TypedDict, total=False):
    """Relational arguments for GHData"""


class KnowledgeBaseIncludeFromGHDataRecursive1(TypedDict, total=False):
    """Relational arguments for GHData"""


class KnowledgeBaseIncludeFromGHDataRecursive2(TypedDict, total=False):
    """Relational arguments for GHData"""


class KnowledgeBaseIncludeFromGHDataRecursive3(TypedDict, total=False):
    """Relational arguments for GHData"""


class KnowledgeBaseIncludeFromGHDataRecursive4(TypedDict, total=False):
    """Relational arguments for GHData"""

    

class KnowledgeBaseArgsFromGHData(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive1'


class KnowledgeBaseArgsFromGHDataRecursive1(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive2'


class KnowledgeBaseArgsFromGHDataRecursive2(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive3'


class KnowledgeBaseArgsFromGHDataRecursive3(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive4'


class KnowledgeBaseArgsFromGHDataRecursive4(TypedDict, total=False):
    """Arguments for GHData"""
    
    

class FindManyKnowledgeBaseArgsFromGHData(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive1'


class FindManyKnowledgeBaseArgsFromGHDataRecursive1(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive2'


class FindManyKnowledgeBaseArgsFromGHDataRecursive2(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive3'


class FindManyKnowledgeBaseArgsFromGHDataRecursive3(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive4'


class FindManyKnowledgeBaseArgsFromGHDataRecursive4(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    
    

class UserIncludeFromGHData(TypedDict, total=False):
    """Relational arguments for GHData"""


class UserIncludeFromGHDataRecursive1(TypedDict, total=False):
    """Relational arguments for GHData"""


class UserIncludeFromGHDataRecursive2(TypedDict, total=False):
    """Relational arguments for GHData"""


class UserIncludeFromGHDataRecursive3(TypedDict, total=False):
    """Relational arguments for GHData"""


class UserIncludeFromGHDataRecursive4(TypedDict, total=False):
    """Relational arguments for GHData"""

    

class UserArgsFromGHData(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromGHDataRecursive1(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromGHDataRecursive2(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromGHDataRecursive3(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromGHDataRecursive4(TypedDict, total=False):
    """Arguments for GHData"""
    
    

class FindManyUserArgsFromGHData(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromGHDataRecursive1(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromGHDataRecursive2(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromGHDataRecursive3(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromGHDataRecursive4(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserInsightsIncludeFromGHData(TypedDict, total=False):
    """Relational arguments for GHData"""


class UserInsightsIncludeFromGHDataRecursive1(TypedDict, total=False):
    """Relational arguments for GHData"""


class UserInsightsIncludeFromGHDataRecursive2(TypedDict, total=False):
    """Relational arguments for GHData"""


class UserInsightsIncludeFromGHDataRecursive3(TypedDict, total=False):
    """Relational arguments for GHData"""


class UserInsightsIncludeFromGHDataRecursive4(TypedDict, total=False):
    """Relational arguments for GHData"""

    

class UserInsightsArgsFromGHData(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive1'


class UserInsightsArgsFromGHDataRecursive1(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive2'


class UserInsightsArgsFromGHDataRecursive2(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive3'


class UserInsightsArgsFromGHDataRecursive3(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive4'


class UserInsightsArgsFromGHDataRecursive4(TypedDict, total=False):
    """Arguments for GHData"""
    
    

class FindManyUserInsightsArgsFromGHData(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive1'


class FindManyUserInsightsArgsFromGHDataRecursive1(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive2'


class FindManyUserInsightsArgsFromGHDataRecursive2(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive3'


class FindManyUserInsightsArgsFromGHDataRecursive3(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive4'


class FindManyUserInsightsArgsFromGHDataRecursive4(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    
    

class UserOnboardIncludeFromGHData(TypedDict, total=False):
    """Relational arguments for GHData"""


class UserOnboardIncludeFromGHDataRecursive1(TypedDict, total=False):
    """Relational arguments for GHData"""


class UserOnboardIncludeFromGHDataRecursive2(TypedDict, total=False):
    """Relational arguments for GHData"""


class UserOnboardIncludeFromGHDataRecursive3(TypedDict, total=False):
    """Relational arguments for GHData"""


class UserOnboardIncludeFromGHDataRecursive4(TypedDict, total=False):
    """Relational arguments for GHData"""

    

class UserOnboardArgsFromGHData(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive1'


class UserOnboardArgsFromGHDataRecursive1(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive2'


class UserOnboardArgsFromGHDataRecursive2(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive3'


class UserOnboardArgsFromGHDataRecursive3(TypedDict, total=False):
    """Arguments for GHData"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive4'


class UserOnboardArgsFromGHDataRecursive4(TypedDict, total=False):
    """Arguments for GHData"""
    
    

class FindManyUserOnboardArgsFromGHData(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive1'


class FindManyUserOnboardArgsFromGHDataRecursive1(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive2'


class FindManyUserOnboardArgsFromGHDataRecursive2(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive3'


class FindManyUserOnboardArgsFromGHDataRecursive3(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive4'


class FindManyUserOnboardArgsFromGHDataRecursive4(TypedDict, total=False):
    """Arguments for GHData"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    


FindManyGHDataArgs = FindManyGHDataArgsFromGHData
FindFirstGHDataArgs = FindManyGHDataArgsFromGHData


    

class GHDataWhereInput(TypedDict, total=False):
    """GHData arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['GHDataWhereInputRecursive1', List['GHDataWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['GHDataWhereInputRecursive1']
    OR: List['GHDataWhereInputRecursive1']
    NOT: List['GHDataWhereInputRecursive1']


class GHDataWhereInputRecursive1(TypedDict, total=False):
    """GHData arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['GHDataWhereInputRecursive2', List['GHDataWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['GHDataWhereInputRecursive2']
    OR: List['GHDataWhereInputRecursive2']
    NOT: List['GHDataWhereInputRecursive2']


class GHDataWhereInputRecursive2(TypedDict, total=False):
    """GHData arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['GHDataWhereInputRecursive3', List['GHDataWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['GHDataWhereInputRecursive3']
    OR: List['GHDataWhereInputRecursive3']
    NOT: List['GHDataWhereInputRecursive3']


class GHDataWhereInputRecursive3(TypedDict, total=False):
    """GHData arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['GHDataWhereInputRecursive4', List['GHDataWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['GHDataWhereInputRecursive4']
    OR: List['GHDataWhereInputRecursive4']
    NOT: List['GHDataWhereInputRecursive4']


class GHDataWhereInputRecursive4(TypedDict, total=False):
    """GHData arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']



# aggregate GHData types


    

class GHDataScalarWhereWithAggregatesInput(TypedDict, total=False):
    """GHData arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['GHDataScalarWhereWithAggregatesInputRecursive1']
    OR: List['GHDataScalarWhereWithAggregatesInputRecursive1']
    NOT: List['GHDataScalarWhereWithAggregatesInputRecursive1']


class GHDataScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """GHData arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['GHDataScalarWhereWithAggregatesInputRecursive2']
    OR: List['GHDataScalarWhereWithAggregatesInputRecursive2']
    NOT: List['GHDataScalarWhereWithAggregatesInputRecursive2']


class GHDataScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """GHData arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['GHDataScalarWhereWithAggregatesInputRecursive3']
    OR: List['GHDataScalarWhereWithAggregatesInputRecursive3']
    NOT: List['GHDataScalarWhereWithAggregatesInputRecursive3']


class GHDataScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """GHData arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['GHDataScalarWhereWithAggregatesInputRecursive4']
    OR: List['GHDataScalarWhereWithAggregatesInputRecursive4']
    NOT: List['GHDataScalarWhereWithAggregatesInputRecursive4']


class GHDataScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """GHData arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']



class GHDataGroupByOutput(TypedDict, total=False):
    email: _str
    content: _str
    _sum: 'GHDataSumAggregateOutput'
    _avg: 'GHDataAvgAggregateOutput'
    _min: 'GHDataMinAggregateOutput'
    _max: 'GHDataMaxAggregateOutput'
    _count: 'GHDataCountAggregateOutput'


class GHDataAvgAggregateOutput(TypedDict, total=False):
    """GHData output for aggregating averages"""


class GHDataSumAggregateOutput(TypedDict, total=False):
    """GHData output for aggregating sums"""


class GHDataScalarAggregateOutput(TypedDict, total=False):
    """GHData output including scalar fields"""
    email: _str
    content: _str


GHDataMinAggregateOutput = GHDataScalarAggregateOutput
GHDataMaxAggregateOutput = GHDataScalarAggregateOutput


class GHDataMaxAggregateInput(TypedDict, total=False):
    """GHData input for aggregating by max"""
    email: bool
    content: bool


class GHDataMinAggregateInput(TypedDict, total=False):
    """GHData input for aggregating by min"""
    email: bool
    content: bool


class GHDataNumberAggregateInput(TypedDict, total=False):
    """GHData input for aggregating numbers"""


GHDataAvgAggregateInput = GHDataNumberAggregateInput
GHDataSumAggregateInput = GHDataNumberAggregateInput


GHDataCountAggregateInput = TypedDict(
    'GHDataCountAggregateInput',
    {
        'email': bool,
        'content': bool,
        '_all': bool,
    },
    total=False,
)

GHDataCountAggregateOutput = TypedDict(
    'GHDataCountAggregateOutput',
    {
        'email': int,
        'content': int,
        '_all': int,
    },
    total=False,
)


GHDataKeys = Literal[
    'email',
    'content',
]
GHDataScalarFieldKeys = Literal[
    'email',
    'content',
]
GHDataScalarFieldKeysT = TypeVar('GHDataScalarFieldKeysT', bound=GHDataScalarFieldKeys)

GHDataRelationalFieldKeys = _NoneType

# KnowledgeBase types

class KnowledgeBaseOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the KnowledgeBase create method"""
    post: Optional[_str]
    resume: Optional[_str]


class KnowledgeBaseCreateInput(KnowledgeBaseOptionalCreateInput):
    """Required arguments to the KnowledgeBase create method"""
    email: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class KnowledgeBaseOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the KnowledgeBase create method, without relations"""
    post: Optional[_str]
    resume: Optional[_str]


class KnowledgeBaseCreateWithoutRelationsInput(KnowledgeBaseOptionalCreateWithoutRelationsInput):
    """Required arguments to the KnowledgeBase create method, without relations"""
    email: _str


class KnowledgeBaseCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'KnowledgeBaseCreateWithoutRelationsInput'
    connect: 'KnowledgeBaseWhereUniqueInput'


class KnowledgeBaseCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['KnowledgeBaseCreateWithoutRelationsInput', List['KnowledgeBaseCreateWithoutRelationsInput']]
    connect: Union['KnowledgeBaseWhereUniqueInput', List['KnowledgeBaseWhereUniqueInput']]


_KnowledgeBaseWhereUnique_email_Input = TypedDict(
    '_KnowledgeBaseWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

KnowledgeBaseWhereUniqueInput = _KnowledgeBaseWhereUnique_email_Input


class KnowledgeBaseUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    email: _str
    post: Optional[_str]
    resume: Optional[_str]


class KnowledgeBaseUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    email: _str
    post: Optional[_str]
    resume: Optional[_str]


class KnowledgeBaseUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['KnowledgeBaseCreateWithoutRelationsInput']
    connect: List['KnowledgeBaseWhereUniqueInput']
    set: List['KnowledgeBaseWhereUniqueInput']
    disconnect: List['KnowledgeBaseWhereUniqueInput']
    delete: List['KnowledgeBaseWhereUniqueInput']

    # TODO
    # update: List['KnowledgeBaseUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['KnowledgeBaseUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['KnowledgeBaseScalarWhereInput']
    # upsert: List['KnowledgeBaseUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['KnowledgeBaseCreateOrConnectWithoutRelationsInput']


class KnowledgeBaseUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'KnowledgeBaseCreateWithoutRelationsInput'
    connect: 'KnowledgeBaseWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'KnowledgeBaseUpdateInput'
    # upsert: 'KnowledgeBaseUpsertWithoutRelationsInput'
    # connectOrCreate: 'KnowledgeBaseCreateOrConnectWithoutRelationsInput'


class KnowledgeBaseUpsertInput(TypedDict):
    create: 'KnowledgeBaseCreateInput'
    update: 'KnowledgeBaseUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_KnowledgeBase_email_OrderByInput = TypedDict(
    '_KnowledgeBase_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_KnowledgeBase_post_OrderByInput = TypedDict(
    '_KnowledgeBase_post_OrderByInput',
    {
        'post': 'SortOrder',
    },
    total=True
)

_KnowledgeBase_resume_OrderByInput = TypedDict(
    '_KnowledgeBase_resume_OrderByInput',
    {
        'resume': 'SortOrder',
    },
    total=True
)

KnowledgeBaseOrderByInput = Union[
    '_KnowledgeBase_email_OrderByInput',
    '_KnowledgeBase_post_OrderByInput',
    '_KnowledgeBase_resume_OrderByInput',
]



# recursive KnowledgeBase types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

KnowledgeBaseRelationFilter = TypedDict(
    'KnowledgeBaseRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class KnowledgeBaseListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class KnowledgeBaseInclude(TypedDict, total=False):
    """KnowledgeBase relational arguments"""


    

class FeedbackIncludeFromKnowledgeBase(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class FeedbackIncludeFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class FeedbackIncludeFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class FeedbackIncludeFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class FeedbackIncludeFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""

    

class FeedbackArgsFromKnowledgeBase(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FeedbackArgsFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FeedbackArgsFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FeedbackArgsFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FeedbackArgsFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    
    

class FindManyFeedbackArgsFromKnowledgeBase(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FindManyFeedbackArgsFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FindManyFeedbackArgsFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FindManyFeedbackArgsFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FindManyFeedbackArgsFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    
    

class GHDataIncludeFromKnowledgeBase(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class GHDataIncludeFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class GHDataIncludeFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class GHDataIncludeFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class GHDataIncludeFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""

    

class GHDataArgsFromKnowledgeBase(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'GHDataIncludeFromGHDataRecursive1'


class GHDataArgsFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'GHDataIncludeFromGHDataRecursive2'


class GHDataArgsFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'GHDataIncludeFromGHDataRecursive3'


class GHDataArgsFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'GHDataIncludeFromGHDataRecursive4'


class GHDataArgsFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    
    

class FindManyGHDataArgsFromKnowledgeBase(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive1'


class FindManyGHDataArgsFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive2'


class FindManyGHDataArgsFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive3'


class FindManyGHDataArgsFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive4'


class FindManyGHDataArgsFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    
    

class KnowledgeBaseIncludeFromKnowledgeBase(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class KnowledgeBaseIncludeFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class KnowledgeBaseIncludeFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class KnowledgeBaseIncludeFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class KnowledgeBaseIncludeFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""

    

class KnowledgeBaseArgsFromKnowledgeBase(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive1'


class KnowledgeBaseArgsFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive2'


class KnowledgeBaseArgsFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive3'


class KnowledgeBaseArgsFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive4'


class KnowledgeBaseArgsFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    
    

class FindManyKnowledgeBaseArgsFromKnowledgeBase(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive1'


class FindManyKnowledgeBaseArgsFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive2'


class FindManyKnowledgeBaseArgsFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive3'


class FindManyKnowledgeBaseArgsFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive4'


class FindManyKnowledgeBaseArgsFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    
    

class UserIncludeFromKnowledgeBase(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class UserIncludeFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class UserIncludeFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class UserIncludeFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class UserIncludeFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""

    

class UserArgsFromKnowledgeBase(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    
    

class FindManyUserArgsFromKnowledgeBase(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserInsightsIncludeFromKnowledgeBase(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class UserInsightsIncludeFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class UserInsightsIncludeFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class UserInsightsIncludeFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class UserInsightsIncludeFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""

    

class UserInsightsArgsFromKnowledgeBase(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive1'


class UserInsightsArgsFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive2'


class UserInsightsArgsFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive3'


class UserInsightsArgsFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive4'


class UserInsightsArgsFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    
    

class FindManyUserInsightsArgsFromKnowledgeBase(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive1'


class FindManyUserInsightsArgsFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive2'


class FindManyUserInsightsArgsFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive3'


class FindManyUserInsightsArgsFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive4'


class FindManyUserInsightsArgsFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    
    

class UserOnboardIncludeFromKnowledgeBase(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class UserOnboardIncludeFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class UserOnboardIncludeFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class UserOnboardIncludeFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""


class UserOnboardIncludeFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Relational arguments for KnowledgeBase"""

    

class UserOnboardArgsFromKnowledgeBase(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive1'


class UserOnboardArgsFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive2'


class UserOnboardArgsFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive3'


class UserOnboardArgsFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive4'


class UserOnboardArgsFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    
    

class FindManyUserOnboardArgsFromKnowledgeBase(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive1'


class FindManyUserOnboardArgsFromKnowledgeBaseRecursive1(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive2'


class FindManyUserOnboardArgsFromKnowledgeBaseRecursive2(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive3'


class FindManyUserOnboardArgsFromKnowledgeBaseRecursive3(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive4'


class FindManyUserOnboardArgsFromKnowledgeBaseRecursive4(TypedDict, total=False):
    """Arguments for KnowledgeBase"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    


FindManyKnowledgeBaseArgs = FindManyKnowledgeBaseArgsFromKnowledgeBase
FindFirstKnowledgeBaseArgs = FindManyKnowledgeBaseArgsFromKnowledgeBase


    

class KnowledgeBaseWhereInput(TypedDict, total=False):
    """KnowledgeBase arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    post: Union[None, _str, 'types.StringFilter']
    resume: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['KnowledgeBaseWhereInputRecursive1', List['KnowledgeBaseWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['KnowledgeBaseWhereInputRecursive1']
    OR: List['KnowledgeBaseWhereInputRecursive1']
    NOT: List['KnowledgeBaseWhereInputRecursive1']


class KnowledgeBaseWhereInputRecursive1(TypedDict, total=False):
    """KnowledgeBase arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    post: Union[None, _str, 'types.StringFilter']
    resume: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['KnowledgeBaseWhereInputRecursive2', List['KnowledgeBaseWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['KnowledgeBaseWhereInputRecursive2']
    OR: List['KnowledgeBaseWhereInputRecursive2']
    NOT: List['KnowledgeBaseWhereInputRecursive2']


class KnowledgeBaseWhereInputRecursive2(TypedDict, total=False):
    """KnowledgeBase arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    post: Union[None, _str, 'types.StringFilter']
    resume: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['KnowledgeBaseWhereInputRecursive3', List['KnowledgeBaseWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['KnowledgeBaseWhereInputRecursive3']
    OR: List['KnowledgeBaseWhereInputRecursive3']
    NOT: List['KnowledgeBaseWhereInputRecursive3']


class KnowledgeBaseWhereInputRecursive3(TypedDict, total=False):
    """KnowledgeBase arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    post: Union[None, _str, 'types.StringFilter']
    resume: Union[None, _str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['KnowledgeBaseWhereInputRecursive4', List['KnowledgeBaseWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['KnowledgeBaseWhereInputRecursive4']
    OR: List['KnowledgeBaseWhereInputRecursive4']
    NOT: List['KnowledgeBaseWhereInputRecursive4']


class KnowledgeBaseWhereInputRecursive4(TypedDict, total=False):
    """KnowledgeBase arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    post: Union[None, _str, 'types.StringFilter']
    resume: Union[None, _str, 'types.StringFilter']



# aggregate KnowledgeBase types


    

class KnowledgeBaseScalarWhereWithAggregatesInput(TypedDict, total=False):
    """KnowledgeBase arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    post: Union[_str, 'types.StringWithAggregatesFilter']
    resume: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['KnowledgeBaseScalarWhereWithAggregatesInputRecursive1']
    OR: List['KnowledgeBaseScalarWhereWithAggregatesInputRecursive1']
    NOT: List['KnowledgeBaseScalarWhereWithAggregatesInputRecursive1']


class KnowledgeBaseScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """KnowledgeBase arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    post: Union[_str, 'types.StringWithAggregatesFilter']
    resume: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['KnowledgeBaseScalarWhereWithAggregatesInputRecursive2']
    OR: List['KnowledgeBaseScalarWhereWithAggregatesInputRecursive2']
    NOT: List['KnowledgeBaseScalarWhereWithAggregatesInputRecursive2']


class KnowledgeBaseScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """KnowledgeBase arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    post: Union[_str, 'types.StringWithAggregatesFilter']
    resume: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['KnowledgeBaseScalarWhereWithAggregatesInputRecursive3']
    OR: List['KnowledgeBaseScalarWhereWithAggregatesInputRecursive3']
    NOT: List['KnowledgeBaseScalarWhereWithAggregatesInputRecursive3']


class KnowledgeBaseScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """KnowledgeBase arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    post: Union[_str, 'types.StringWithAggregatesFilter']
    resume: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['KnowledgeBaseScalarWhereWithAggregatesInputRecursive4']
    OR: List['KnowledgeBaseScalarWhereWithAggregatesInputRecursive4']
    NOT: List['KnowledgeBaseScalarWhereWithAggregatesInputRecursive4']


class KnowledgeBaseScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """KnowledgeBase arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    post: Union[_str, 'types.StringWithAggregatesFilter']
    resume: Union[_str, 'types.StringWithAggregatesFilter']



class KnowledgeBaseGroupByOutput(TypedDict, total=False):
    email: _str
    post: _str
    resume: _str
    _sum: 'KnowledgeBaseSumAggregateOutput'
    _avg: 'KnowledgeBaseAvgAggregateOutput'
    _min: 'KnowledgeBaseMinAggregateOutput'
    _max: 'KnowledgeBaseMaxAggregateOutput'
    _count: 'KnowledgeBaseCountAggregateOutput'


class KnowledgeBaseAvgAggregateOutput(TypedDict, total=False):
    """KnowledgeBase output for aggregating averages"""


class KnowledgeBaseSumAggregateOutput(TypedDict, total=False):
    """KnowledgeBase output for aggregating sums"""


class KnowledgeBaseScalarAggregateOutput(TypedDict, total=False):
    """KnowledgeBase output including scalar fields"""
    email: _str
    post: _str
    resume: _str


KnowledgeBaseMinAggregateOutput = KnowledgeBaseScalarAggregateOutput
KnowledgeBaseMaxAggregateOutput = KnowledgeBaseScalarAggregateOutput


class KnowledgeBaseMaxAggregateInput(TypedDict, total=False):
    """KnowledgeBase input for aggregating by max"""
    email: bool
    post: bool
    resume: bool


class KnowledgeBaseMinAggregateInput(TypedDict, total=False):
    """KnowledgeBase input for aggregating by min"""
    email: bool
    post: bool
    resume: bool


class KnowledgeBaseNumberAggregateInput(TypedDict, total=False):
    """KnowledgeBase input for aggregating numbers"""


KnowledgeBaseAvgAggregateInput = KnowledgeBaseNumberAggregateInput
KnowledgeBaseSumAggregateInput = KnowledgeBaseNumberAggregateInput


KnowledgeBaseCountAggregateInput = TypedDict(
    'KnowledgeBaseCountAggregateInput',
    {
        'email': bool,
        'post': bool,
        'resume': bool,
        '_all': bool,
    },
    total=False,
)

KnowledgeBaseCountAggregateOutput = TypedDict(
    'KnowledgeBaseCountAggregateOutput',
    {
        'email': int,
        'post': int,
        'resume': int,
        '_all': int,
    },
    total=False,
)


KnowledgeBaseKeys = Literal[
    'email',
    'post',
    'resume',
]
KnowledgeBaseScalarFieldKeys = Literal[
    'email',
    'post',
    'resume',
]
KnowledgeBaseScalarFieldKeysT = TypeVar('KnowledgeBaseScalarFieldKeysT', bound=KnowledgeBaseScalarFieldKeys)

KnowledgeBaseRelationalFieldKeys = _NoneType

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _int
    username: Optional[_str]


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _int
    username: Optional[_str]


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    password: _str


class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]


_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_int',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: Union[AtomicIntInput, _int]
    username: Optional[_str]
    email: _str
    password: _str


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: Union[AtomicIntInput, _int]
    username: Optional[_str]
    email: _str
    password: _str


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserCreateOrConnectWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserCreateOrConnectWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_username_OrderByInput',
    '_User_email_OrderByInput',
    '_User_password_OrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""


    

class FeedbackIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class FeedbackIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class FeedbackIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class FeedbackIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class FeedbackIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class FeedbackArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FeedbackArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FeedbackArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FeedbackArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FeedbackArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyFeedbackArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FindManyFeedbackArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FindManyFeedbackArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FindManyFeedbackArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FindManyFeedbackArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    
    

class GHDataIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class GHDataIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class GHDataIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class GHDataIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class GHDataIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class GHDataArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'GHDataIncludeFromGHDataRecursive1'


class GHDataArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'GHDataIncludeFromGHDataRecursive2'


class GHDataArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'GHDataIncludeFromGHDataRecursive3'


class GHDataArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'GHDataIncludeFromGHDataRecursive4'


class GHDataArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyGHDataArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive1'


class FindManyGHDataArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive2'


class FindManyGHDataArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive3'


class FindManyGHDataArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive4'


class FindManyGHDataArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    
    

class KnowledgeBaseIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class KnowledgeBaseIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class KnowledgeBaseIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class KnowledgeBaseIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class KnowledgeBaseIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class KnowledgeBaseArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive1'


class KnowledgeBaseArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive2'


class KnowledgeBaseArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive3'


class KnowledgeBaseArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive4'


class KnowledgeBaseArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyKnowledgeBaseArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive1'


class FindManyKnowledgeBaseArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive2'


class FindManyKnowledgeBaseArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive3'


class FindManyKnowledgeBaseArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive4'


class FindManyKnowledgeBaseArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    
    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserInsightsIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class UserInsightsIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class UserInsightsIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class UserInsightsIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class UserInsightsIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserInsightsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive1'


class UserInsightsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive2'


class UserInsightsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive3'


class UserInsightsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive4'


class UserInsightsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserInsightsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive1'


class FindManyUserInsightsArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive2'


class FindManyUserInsightsArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive3'


class FindManyUserInsightsArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive4'


class FindManyUserInsightsArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    
    

class UserOnboardIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""


class UserOnboardIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""


class UserOnboardIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""


class UserOnboardIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""


class UserOnboardIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserOnboardArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive1'


class UserOnboardArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive2'


class UserOnboardArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive3'


class UserOnboardArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive4'


class UserOnboardArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserOnboardArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive1'


class FindManyUserOnboardArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive2'


class FindManyUserOnboardArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive3'


class FindManyUserOnboardArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive4'


class FindManyUserOnboardArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[None, _str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[None, _str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[None, _str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[None, _str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntFilter']
    username: Union[None, _str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_int, 'types.IntWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _int
    username: _str
    email: _str
    password: _str
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""
    id: float


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""
    id: _int


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _int
    username: _str
    email: _str
    password: _str


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    username: bool
    email: bool
    password: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    username: bool
    email: bool
    password: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""
    id: bool


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'username': bool,
        'email': bool,
        'password': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'username': int,
        'email': int,
        'password': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'username',
    'email',
    'password',
]
UserScalarFieldKeys = Literal[
    'id',
    'username',
    'email',
    'password',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = _NoneType

# UserInsights types

class UserInsightsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserInsights create method"""


class UserInsightsCreateInput(UserInsightsOptionalCreateInput):
    """Required arguments to the UserInsights create method"""
    email: _str
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserInsightsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserInsights create method, without relations"""


class UserInsightsCreateWithoutRelationsInput(UserInsightsOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserInsights create method, without relations"""
    email: _str
    content: _str


class UserInsightsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserInsightsCreateWithoutRelationsInput'
    connect: 'UserInsightsWhereUniqueInput'


class UserInsightsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserInsightsCreateWithoutRelationsInput', List['UserInsightsCreateWithoutRelationsInput']]
    connect: Union['UserInsightsWhereUniqueInput', List['UserInsightsWhereUniqueInput']]


_UserInsightsWhereUnique_email_Input = TypedDict(
    '_UserInsightsWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserInsightsWhereUniqueInput = _UserInsightsWhereUnique_email_Input


class UserInsightsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    email: _str
    content: _str


class UserInsightsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    email: _str
    content: _str


class UserInsightsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserInsightsCreateWithoutRelationsInput']
    connect: List['UserInsightsWhereUniqueInput']
    set: List['UserInsightsWhereUniqueInput']
    disconnect: List['UserInsightsWhereUniqueInput']
    delete: List['UserInsightsWhereUniqueInput']

    # TODO
    # update: List['UserInsightsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserInsightsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserInsightsScalarWhereInput']
    # upsert: List['UserInsightsUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserInsightsCreateOrConnectWithoutRelationsInput']


class UserInsightsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserInsightsCreateWithoutRelationsInput'
    connect: 'UserInsightsWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserInsightsUpdateInput'
    # upsert: 'UserInsightsUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserInsightsCreateOrConnectWithoutRelationsInput'


class UserInsightsUpsertInput(TypedDict):
    create: 'UserInsightsCreateInput'
    update: 'UserInsightsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserInsights_email_OrderByInput = TypedDict(
    '_UserInsights_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_UserInsights_content_OrderByInput = TypedDict(
    '_UserInsights_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

UserInsightsOrderByInput = Union[
    '_UserInsights_email_OrderByInput',
    '_UserInsights_content_OrderByInput',
]



# recursive UserInsights types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserInsightsRelationFilter = TypedDict(
    'UserInsightsRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserInsightsListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInsightsInclude(TypedDict, total=False):
    """UserInsights relational arguments"""


    

class FeedbackIncludeFromUserInsights(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class FeedbackIncludeFromUserInsightsRecursive1(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class FeedbackIncludeFromUserInsightsRecursive2(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class FeedbackIncludeFromUserInsightsRecursive3(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class FeedbackIncludeFromUserInsightsRecursive4(TypedDict, total=False):
    """Relational arguments for UserInsights"""

    

class FeedbackArgsFromUserInsights(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FeedbackArgsFromUserInsightsRecursive1(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FeedbackArgsFromUserInsightsRecursive2(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FeedbackArgsFromUserInsightsRecursive3(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FeedbackArgsFromUserInsightsRecursive4(TypedDict, total=False):
    """Arguments for UserInsights"""
    
    

class FindManyFeedbackArgsFromUserInsights(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FindManyFeedbackArgsFromUserInsightsRecursive1(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FindManyFeedbackArgsFromUserInsightsRecursive2(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FindManyFeedbackArgsFromUserInsightsRecursive3(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FindManyFeedbackArgsFromUserInsightsRecursive4(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    
    

class GHDataIncludeFromUserInsights(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class GHDataIncludeFromUserInsightsRecursive1(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class GHDataIncludeFromUserInsightsRecursive2(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class GHDataIncludeFromUserInsightsRecursive3(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class GHDataIncludeFromUserInsightsRecursive4(TypedDict, total=False):
    """Relational arguments for UserInsights"""

    

class GHDataArgsFromUserInsights(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'GHDataIncludeFromGHDataRecursive1'


class GHDataArgsFromUserInsightsRecursive1(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'GHDataIncludeFromGHDataRecursive2'


class GHDataArgsFromUserInsightsRecursive2(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'GHDataIncludeFromGHDataRecursive3'


class GHDataArgsFromUserInsightsRecursive3(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'GHDataIncludeFromGHDataRecursive4'


class GHDataArgsFromUserInsightsRecursive4(TypedDict, total=False):
    """Arguments for UserInsights"""
    
    

class FindManyGHDataArgsFromUserInsights(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive1'


class FindManyGHDataArgsFromUserInsightsRecursive1(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive2'


class FindManyGHDataArgsFromUserInsightsRecursive2(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive3'


class FindManyGHDataArgsFromUserInsightsRecursive3(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive4'


class FindManyGHDataArgsFromUserInsightsRecursive4(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    
    

class KnowledgeBaseIncludeFromUserInsights(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class KnowledgeBaseIncludeFromUserInsightsRecursive1(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class KnowledgeBaseIncludeFromUserInsightsRecursive2(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class KnowledgeBaseIncludeFromUserInsightsRecursive3(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class KnowledgeBaseIncludeFromUserInsightsRecursive4(TypedDict, total=False):
    """Relational arguments for UserInsights"""

    

class KnowledgeBaseArgsFromUserInsights(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive1'


class KnowledgeBaseArgsFromUserInsightsRecursive1(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive2'


class KnowledgeBaseArgsFromUserInsightsRecursive2(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive3'


class KnowledgeBaseArgsFromUserInsightsRecursive3(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive4'


class KnowledgeBaseArgsFromUserInsightsRecursive4(TypedDict, total=False):
    """Arguments for UserInsights"""
    
    

class FindManyKnowledgeBaseArgsFromUserInsights(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive1'


class FindManyKnowledgeBaseArgsFromUserInsightsRecursive1(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive2'


class FindManyKnowledgeBaseArgsFromUserInsightsRecursive2(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive3'


class FindManyKnowledgeBaseArgsFromUserInsightsRecursive3(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive4'


class FindManyKnowledgeBaseArgsFromUserInsightsRecursive4(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    
    

class UserIncludeFromUserInsights(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class UserIncludeFromUserInsightsRecursive1(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class UserIncludeFromUserInsightsRecursive2(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class UserIncludeFromUserInsightsRecursive3(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class UserIncludeFromUserInsightsRecursive4(TypedDict, total=False):
    """Relational arguments for UserInsights"""

    

class UserArgsFromUserInsights(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserInsightsRecursive1(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserInsightsRecursive2(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserInsightsRecursive3(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserInsightsRecursive4(TypedDict, total=False):
    """Arguments for UserInsights"""
    
    

class FindManyUserArgsFromUserInsights(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserInsightsRecursive1(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserInsightsRecursive2(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserInsightsRecursive3(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserInsightsRecursive4(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserInsightsIncludeFromUserInsights(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class UserInsightsIncludeFromUserInsightsRecursive1(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class UserInsightsIncludeFromUserInsightsRecursive2(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class UserInsightsIncludeFromUserInsightsRecursive3(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class UserInsightsIncludeFromUserInsightsRecursive4(TypedDict, total=False):
    """Relational arguments for UserInsights"""

    

class UserInsightsArgsFromUserInsights(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive1'


class UserInsightsArgsFromUserInsightsRecursive1(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive2'


class UserInsightsArgsFromUserInsightsRecursive2(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive3'


class UserInsightsArgsFromUserInsightsRecursive3(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive4'


class UserInsightsArgsFromUserInsightsRecursive4(TypedDict, total=False):
    """Arguments for UserInsights"""
    
    

class FindManyUserInsightsArgsFromUserInsights(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive1'


class FindManyUserInsightsArgsFromUserInsightsRecursive1(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive2'


class FindManyUserInsightsArgsFromUserInsightsRecursive2(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive3'


class FindManyUserInsightsArgsFromUserInsightsRecursive3(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive4'


class FindManyUserInsightsArgsFromUserInsightsRecursive4(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    
    

class UserOnboardIncludeFromUserInsights(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class UserOnboardIncludeFromUserInsightsRecursive1(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class UserOnboardIncludeFromUserInsightsRecursive2(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class UserOnboardIncludeFromUserInsightsRecursive3(TypedDict, total=False):
    """Relational arguments for UserInsights"""


class UserOnboardIncludeFromUserInsightsRecursive4(TypedDict, total=False):
    """Relational arguments for UserInsights"""

    

class UserOnboardArgsFromUserInsights(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive1'


class UserOnboardArgsFromUserInsightsRecursive1(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive2'


class UserOnboardArgsFromUserInsightsRecursive2(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive3'


class UserOnboardArgsFromUserInsightsRecursive3(TypedDict, total=False):
    """Arguments for UserInsights"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive4'


class UserOnboardArgsFromUserInsightsRecursive4(TypedDict, total=False):
    """Arguments for UserInsights"""
    
    

class FindManyUserOnboardArgsFromUserInsights(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive1'


class FindManyUserOnboardArgsFromUserInsightsRecursive1(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive2'


class FindManyUserOnboardArgsFromUserInsightsRecursive2(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive3'


class FindManyUserOnboardArgsFromUserInsightsRecursive3(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive4'


class FindManyUserOnboardArgsFromUserInsightsRecursive4(TypedDict, total=False):
    """Arguments for UserInsights"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    


FindManyUserInsightsArgs = FindManyUserInsightsArgsFromUserInsights
FindFirstUserInsightsArgs = FindManyUserInsightsArgsFromUserInsights


    

class UserInsightsWhereInput(TypedDict, total=False):
    """UserInsights arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserInsightsWhereInputRecursive1', List['UserInsightsWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserInsightsWhereInputRecursive1']
    OR: List['UserInsightsWhereInputRecursive1']
    NOT: List['UserInsightsWhereInputRecursive1']


class UserInsightsWhereInputRecursive1(TypedDict, total=False):
    """UserInsights arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserInsightsWhereInputRecursive2', List['UserInsightsWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserInsightsWhereInputRecursive2']
    OR: List['UserInsightsWhereInputRecursive2']
    NOT: List['UserInsightsWhereInputRecursive2']


class UserInsightsWhereInputRecursive2(TypedDict, total=False):
    """UserInsights arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserInsightsWhereInputRecursive3', List['UserInsightsWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserInsightsWhereInputRecursive3']
    OR: List['UserInsightsWhereInputRecursive3']
    NOT: List['UserInsightsWhereInputRecursive3']


class UserInsightsWhereInputRecursive3(TypedDict, total=False):
    """UserInsights arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserInsightsWhereInputRecursive4', List['UserInsightsWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserInsightsWhereInputRecursive4']
    OR: List['UserInsightsWhereInputRecursive4']
    NOT: List['UserInsightsWhereInputRecursive4']


class UserInsightsWhereInputRecursive4(TypedDict, total=False):
    """UserInsights arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']



# aggregate UserInsights types


    

class UserInsightsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserInsights arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserInsightsScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserInsightsScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserInsightsScalarWhereWithAggregatesInputRecursive1']


class UserInsightsScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserInsights arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserInsightsScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserInsightsScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserInsightsScalarWhereWithAggregatesInputRecursive2']


class UserInsightsScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserInsights arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserInsightsScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserInsightsScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserInsightsScalarWhereWithAggregatesInputRecursive3']


class UserInsightsScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserInsights arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserInsightsScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserInsightsScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserInsightsScalarWhereWithAggregatesInputRecursive4']


class UserInsightsScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserInsights arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']



class UserInsightsGroupByOutput(TypedDict, total=False):
    email: _str
    content: _str
    _sum: 'UserInsightsSumAggregateOutput'
    _avg: 'UserInsightsAvgAggregateOutput'
    _min: 'UserInsightsMinAggregateOutput'
    _max: 'UserInsightsMaxAggregateOutput'
    _count: 'UserInsightsCountAggregateOutput'


class UserInsightsAvgAggregateOutput(TypedDict, total=False):
    """UserInsights output for aggregating averages"""


class UserInsightsSumAggregateOutput(TypedDict, total=False):
    """UserInsights output for aggregating sums"""


class UserInsightsScalarAggregateOutput(TypedDict, total=False):
    """UserInsights output including scalar fields"""
    email: _str
    content: _str


UserInsightsMinAggregateOutput = UserInsightsScalarAggregateOutput
UserInsightsMaxAggregateOutput = UserInsightsScalarAggregateOutput


class UserInsightsMaxAggregateInput(TypedDict, total=False):
    """UserInsights input for aggregating by max"""
    email: bool
    content: bool


class UserInsightsMinAggregateInput(TypedDict, total=False):
    """UserInsights input for aggregating by min"""
    email: bool
    content: bool


class UserInsightsNumberAggregateInput(TypedDict, total=False):
    """UserInsights input for aggregating numbers"""


UserInsightsAvgAggregateInput = UserInsightsNumberAggregateInput
UserInsightsSumAggregateInput = UserInsightsNumberAggregateInput


UserInsightsCountAggregateInput = TypedDict(
    'UserInsightsCountAggregateInput',
    {
        'email': bool,
        'content': bool,
        '_all': bool,
    },
    total=False,
)

UserInsightsCountAggregateOutput = TypedDict(
    'UserInsightsCountAggregateOutput',
    {
        'email': int,
        'content': int,
        '_all': int,
    },
    total=False,
)


UserInsightsKeys = Literal[
    'email',
    'content',
]
UserInsightsScalarFieldKeys = Literal[
    'email',
    'content',
]
UserInsightsScalarFieldKeysT = TypeVar('UserInsightsScalarFieldKeysT', bound=UserInsightsScalarFieldKeys)

UserInsightsRelationalFieldKeys = _NoneType

# UserOnboard types

class UserOnboardOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the UserOnboard create method"""


class UserOnboardCreateInput(UserOnboardOptionalCreateInput):
    """Required arguments to the UserOnboard create method"""
    email: _str
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOnboardOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the UserOnboard create method, without relations"""


class UserOnboardCreateWithoutRelationsInput(UserOnboardOptionalCreateWithoutRelationsInput):
    """Required arguments to the UserOnboard create method, without relations"""
    email: _str
    content: _str


class UserOnboardCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserOnboardCreateWithoutRelationsInput'
    connect: 'UserOnboardWhereUniqueInput'


class UserOnboardCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserOnboardCreateWithoutRelationsInput', List['UserOnboardCreateWithoutRelationsInput']]
    connect: Union['UserOnboardWhereUniqueInput', List['UserOnboardWhereUniqueInput']]


_UserOnboardWhereUnique_email_Input = TypedDict(
    '_UserOnboardWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserOnboardWhereUniqueInput = _UserOnboardWhereUnique_email_Input


class UserOnboardUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    email: _str
    content: _str


class UserOnboardUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    email: _str
    content: _str


class UserOnboardUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserOnboardCreateWithoutRelationsInput']
    connect: List['UserOnboardWhereUniqueInput']
    set: List['UserOnboardWhereUniqueInput']
    disconnect: List['UserOnboardWhereUniqueInput']
    delete: List['UserOnboardWhereUniqueInput']

    # TODO
    # update: List['UserOnboardUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserOnboardUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserOnboardScalarWhereInput']
    # upsert: List['UserOnboardUpserteWithWhereUniqueWithoutRelationsInput']
    # connectOrCreate: List['UserOnboardCreateOrConnectWithoutRelationsInput']


class UserOnboardUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserOnboardCreateWithoutRelationsInput'
    connect: 'UserOnboardWhereUniqueInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserOnboardUpdateInput'
    # upsert: 'UserOnboardUpsertWithoutRelationsInput'
    # connectOrCreate: 'UserOnboardCreateOrConnectWithoutRelationsInput'


class UserOnboardUpsertInput(TypedDict):
    create: 'UserOnboardCreateInput'
    update: 'UserOnboardUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_UserOnboard_email_OrderByInput = TypedDict(
    '_UserOnboard_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_UserOnboard_content_OrderByInput = TypedDict(
    '_UserOnboard_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

UserOnboardOrderByInput = Union[
    '_UserOnboard_email_OrderByInput',
    '_UserOnboard_content_OrderByInput',
]



# recursive UserOnboard types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserOnboardRelationFilter = TypedDict(
    'UserOnboardRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserOnboardListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserOnboardInclude(TypedDict, total=False):
    """UserOnboard relational arguments"""


    

class FeedbackIncludeFromUserOnboard(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class FeedbackIncludeFromUserOnboardRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class FeedbackIncludeFromUserOnboardRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class FeedbackIncludeFromUserOnboardRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class FeedbackIncludeFromUserOnboardRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnboard"""

    

class FeedbackArgsFromUserOnboard(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FeedbackArgsFromUserOnboardRecursive1(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FeedbackArgsFromUserOnboardRecursive2(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FeedbackArgsFromUserOnboardRecursive3(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FeedbackArgsFromUserOnboardRecursive4(TypedDict, total=False):
    """Arguments for UserOnboard"""
    
    

class FindManyFeedbackArgsFromUserOnboard(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive1'


class FindManyFeedbackArgsFromUserOnboardRecursive1(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive2'


class FindManyFeedbackArgsFromUserOnboardRecursive2(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive3'


class FindManyFeedbackArgsFromUserOnboardRecursive3(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    include: 'FeedbackIncludeFromFeedbackRecursive4'


class FindManyFeedbackArgsFromUserOnboardRecursive4(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['FeedbackOrderByInput', List['FeedbackOrderByInput']]
    where: 'FeedbackWhereInput'
    cursor: 'FeedbackWhereUniqueInput'
    distinct: List['FeedbackScalarFieldKeys']
    
    

class GHDataIncludeFromUserOnboard(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class GHDataIncludeFromUserOnboardRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class GHDataIncludeFromUserOnboardRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class GHDataIncludeFromUserOnboardRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class GHDataIncludeFromUserOnboardRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnboard"""

    

class GHDataArgsFromUserOnboard(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'GHDataIncludeFromGHDataRecursive1'


class GHDataArgsFromUserOnboardRecursive1(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'GHDataIncludeFromGHDataRecursive2'


class GHDataArgsFromUserOnboardRecursive2(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'GHDataIncludeFromGHDataRecursive3'


class GHDataArgsFromUserOnboardRecursive3(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'GHDataIncludeFromGHDataRecursive4'


class GHDataArgsFromUserOnboardRecursive4(TypedDict, total=False):
    """Arguments for UserOnboard"""
    
    

class FindManyGHDataArgsFromUserOnboard(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive1'


class FindManyGHDataArgsFromUserOnboardRecursive1(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive2'


class FindManyGHDataArgsFromUserOnboardRecursive2(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive3'


class FindManyGHDataArgsFromUserOnboardRecursive3(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    include: 'GHDataIncludeFromGHDataRecursive4'


class FindManyGHDataArgsFromUserOnboardRecursive4(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['GHDataOrderByInput', List['GHDataOrderByInput']]
    where: 'GHDataWhereInput'
    cursor: 'GHDataWhereUniqueInput'
    distinct: List['GHDataScalarFieldKeys']
    
    

class KnowledgeBaseIncludeFromUserOnboard(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class KnowledgeBaseIncludeFromUserOnboardRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class KnowledgeBaseIncludeFromUserOnboardRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class KnowledgeBaseIncludeFromUserOnboardRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class KnowledgeBaseIncludeFromUserOnboardRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnboard"""

    

class KnowledgeBaseArgsFromUserOnboard(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive1'


class KnowledgeBaseArgsFromUserOnboardRecursive1(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive2'


class KnowledgeBaseArgsFromUserOnboardRecursive2(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive3'


class KnowledgeBaseArgsFromUserOnboardRecursive3(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive4'


class KnowledgeBaseArgsFromUserOnboardRecursive4(TypedDict, total=False):
    """Arguments for UserOnboard"""
    
    

class FindManyKnowledgeBaseArgsFromUserOnboard(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive1'


class FindManyKnowledgeBaseArgsFromUserOnboardRecursive1(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive2'


class FindManyKnowledgeBaseArgsFromUserOnboardRecursive2(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive3'


class FindManyKnowledgeBaseArgsFromUserOnboardRecursive3(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    include: 'KnowledgeBaseIncludeFromKnowledgeBaseRecursive4'


class FindManyKnowledgeBaseArgsFromUserOnboardRecursive4(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['KnowledgeBaseOrderByInput', List['KnowledgeBaseOrderByInput']]
    where: 'KnowledgeBaseWhereInput'
    cursor: 'KnowledgeBaseWhereUniqueInput'
    distinct: List['KnowledgeBaseScalarFieldKeys']
    
    

class UserIncludeFromUserOnboard(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class UserIncludeFromUserOnboardRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class UserIncludeFromUserOnboardRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class UserIncludeFromUserOnboardRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class UserIncludeFromUserOnboardRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnboard"""

    

class UserArgsFromUserOnboard(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserOnboardRecursive1(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserOnboardRecursive2(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserOnboardRecursive3(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserOnboardRecursive4(TypedDict, total=False):
    """Arguments for UserOnboard"""
    
    

class FindManyUserArgsFromUserOnboard(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserOnboardRecursive1(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserOnboardRecursive2(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserOnboardRecursive3(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserOnboardRecursive4(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class UserInsightsIncludeFromUserOnboard(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class UserInsightsIncludeFromUserOnboardRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class UserInsightsIncludeFromUserOnboardRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class UserInsightsIncludeFromUserOnboardRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class UserInsightsIncludeFromUserOnboardRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnboard"""

    

class UserInsightsArgsFromUserOnboard(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive1'


class UserInsightsArgsFromUserOnboardRecursive1(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive2'


class UserInsightsArgsFromUserOnboardRecursive2(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive3'


class UserInsightsArgsFromUserOnboardRecursive3(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'UserInsightsIncludeFromUserInsightsRecursive4'


class UserInsightsArgsFromUserOnboardRecursive4(TypedDict, total=False):
    """Arguments for UserOnboard"""
    
    

class FindManyUserInsightsArgsFromUserOnboard(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive1'


class FindManyUserInsightsArgsFromUserOnboardRecursive1(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive2'


class FindManyUserInsightsArgsFromUserOnboardRecursive2(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive3'


class FindManyUserInsightsArgsFromUserOnboardRecursive3(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    include: 'UserInsightsIncludeFromUserInsightsRecursive4'


class FindManyUserInsightsArgsFromUserOnboardRecursive4(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserInsightsOrderByInput', List['UserInsightsOrderByInput']]
    where: 'UserInsightsWhereInput'
    cursor: 'UserInsightsWhereUniqueInput'
    distinct: List['UserInsightsScalarFieldKeys']
    
    

class UserOnboardIncludeFromUserOnboard(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class UserOnboardIncludeFromUserOnboardRecursive1(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class UserOnboardIncludeFromUserOnboardRecursive2(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class UserOnboardIncludeFromUserOnboardRecursive3(TypedDict, total=False):
    """Relational arguments for UserOnboard"""


class UserOnboardIncludeFromUserOnboardRecursive4(TypedDict, total=False):
    """Relational arguments for UserOnboard"""

    

class UserOnboardArgsFromUserOnboard(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive1'


class UserOnboardArgsFromUserOnboardRecursive1(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive2'


class UserOnboardArgsFromUserOnboardRecursive2(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive3'


class UserOnboardArgsFromUserOnboardRecursive3(TypedDict, total=False):
    """Arguments for UserOnboard"""
    include: 'UserOnboardIncludeFromUserOnboardRecursive4'


class UserOnboardArgsFromUserOnboardRecursive4(TypedDict, total=False):
    """Arguments for UserOnboard"""
    
    

class FindManyUserOnboardArgsFromUserOnboard(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive1'


class FindManyUserOnboardArgsFromUserOnboardRecursive1(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive2'


class FindManyUserOnboardArgsFromUserOnboardRecursive2(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive3'


class FindManyUserOnboardArgsFromUserOnboardRecursive3(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    include: 'UserOnboardIncludeFromUserOnboardRecursive4'


class FindManyUserOnboardArgsFromUserOnboardRecursive4(TypedDict, total=False):
    """Arguments for UserOnboard"""
    take: int
    skip: int
    order_by: Union['UserOnboardOrderByInput', List['UserOnboardOrderByInput']]
    where: 'UserOnboardWhereInput'
    cursor: 'UserOnboardWhereUniqueInput'
    distinct: List['UserOnboardScalarFieldKeys']
    


FindManyUserOnboardArgs = FindManyUserOnboardArgsFromUserOnboard
FindFirstUserOnboardArgs = FindManyUserOnboardArgsFromUserOnboard


    

class UserOnboardWhereInput(TypedDict, total=False):
    """UserOnboard arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserOnboardWhereInputRecursive1', List['UserOnboardWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserOnboardWhereInputRecursive1']
    OR: List['UserOnboardWhereInputRecursive1']
    NOT: List['UserOnboardWhereInputRecursive1']


class UserOnboardWhereInputRecursive1(TypedDict, total=False):
    """UserOnboard arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserOnboardWhereInputRecursive2', List['UserOnboardWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserOnboardWhereInputRecursive2']
    OR: List['UserOnboardWhereInputRecursive2']
    NOT: List['UserOnboardWhereInputRecursive2']


class UserOnboardWhereInputRecursive2(TypedDict, total=False):
    """UserOnboard arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserOnboardWhereInputRecursive3', List['UserOnboardWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserOnboardWhereInputRecursive3']
    OR: List['UserOnboardWhereInputRecursive3']
    NOT: List['UserOnboardWhereInputRecursive3']


class UserOnboardWhereInputRecursive3(TypedDict, total=False):
    """UserOnboard arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']

    # should be noted that AND and NOT should be Union['UserOnboardWhereInputRecursive4', List['UserOnboardWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserOnboardWhereInputRecursive4']
    OR: List['UserOnboardWhereInputRecursive4']
    NOT: List['UserOnboardWhereInputRecursive4']


class UserOnboardWhereInputRecursive4(TypedDict, total=False):
    """UserOnboard arguments for searching"""
    email: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']



# aggregate UserOnboard types


    

class UserOnboardScalarWhereWithAggregatesInput(TypedDict, total=False):
    """UserOnboard arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserOnboardScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserOnboardScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserOnboardScalarWhereWithAggregatesInputRecursive1']


class UserOnboardScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """UserOnboard arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserOnboardScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserOnboardScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserOnboardScalarWhereWithAggregatesInputRecursive2']


class UserOnboardScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """UserOnboard arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserOnboardScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserOnboardScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserOnboardScalarWhereWithAggregatesInputRecursive3']


class UserOnboardScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """UserOnboard arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['UserOnboardScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserOnboardScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserOnboardScalarWhereWithAggregatesInputRecursive4']


class UserOnboardScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """UserOnboard arguments for searching"""
    email: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']



class UserOnboardGroupByOutput(TypedDict, total=False):
    email: _str
    content: _str
    _sum: 'UserOnboardSumAggregateOutput'
    _avg: 'UserOnboardAvgAggregateOutput'
    _min: 'UserOnboardMinAggregateOutput'
    _max: 'UserOnboardMaxAggregateOutput'
    _count: 'UserOnboardCountAggregateOutput'


class UserOnboardAvgAggregateOutput(TypedDict, total=False):
    """UserOnboard output for aggregating averages"""


class UserOnboardSumAggregateOutput(TypedDict, total=False):
    """UserOnboard output for aggregating sums"""


class UserOnboardScalarAggregateOutput(TypedDict, total=False):
    """UserOnboard output including scalar fields"""
    email: _str
    content: _str


UserOnboardMinAggregateOutput = UserOnboardScalarAggregateOutput
UserOnboardMaxAggregateOutput = UserOnboardScalarAggregateOutput


class UserOnboardMaxAggregateInput(TypedDict, total=False):
    """UserOnboard input for aggregating by max"""
    email: bool
    content: bool


class UserOnboardMinAggregateInput(TypedDict, total=False):
    """UserOnboard input for aggregating by min"""
    email: bool
    content: bool


class UserOnboardNumberAggregateInput(TypedDict, total=False):
    """UserOnboard input for aggregating numbers"""


UserOnboardAvgAggregateInput = UserOnboardNumberAggregateInput
UserOnboardSumAggregateInput = UserOnboardNumberAggregateInput


UserOnboardCountAggregateInput = TypedDict(
    'UserOnboardCountAggregateInput',
    {
        'email': bool,
        'content': bool,
        '_all': bool,
    },
    total=False,
)

UserOnboardCountAggregateOutput = TypedDict(
    'UserOnboardCountAggregateOutput',
    {
        'email': int,
        'content': int,
        '_all': int,
    },
    total=False,
)


UserOnboardKeys = Literal[
    'email',
    'content',
]
UserOnboardScalarFieldKeys = Literal[
    'email',
    'content',
]
UserOnboardScalarFieldKeysT = TypeVar('UserOnboardScalarFieldKeysT', bound=UserOnboardScalarFieldKeys)

UserOnboardRelationalFieldKeys = _NoneType



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields