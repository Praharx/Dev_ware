# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class FeedbackActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Feedback]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Feedback.prisma().query_raw(
            'SELECT * FROM Feedback WHERE email = $1',
            'bbadfchfja',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Feedback
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Feedback.prisma().query_first(
            'SELECT * FROM Feedback WHERE content = $1',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.FeedbackCreateInput,
        include: Optional[types.FeedbackInclude] = None
    ) -> _PrismaModelT:
        """Create a new Feedback record.

        Parameters
        ----------
        data
            Feedback record data
        include
            Specifies which relations should be loaded on the returned Feedback model

        Returns
        -------
        prisma.models.Feedback
            The created Feedback record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Feedback record from just the required fields
        feedback = await Feedback.prisma().create(
            data={
                # data to create a Feedback record
                'email': 'ggciceaie',
                'content': 'bbehjachib',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.FeedbackCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Feedback records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Feedback record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Feedback.prisma().create_many(
            data=[
                {
                    # data to create a Feedback record
                    'email': 'cadfabfehe',
                    'content': 'dgiiaaijj',
                },
                {
                    # data to create a Feedback record
                    'email': 'bfaiacjjfc',
                    'content': 'eigcfgbif',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.FeedbackWhereUniqueInput,
        include: Optional[types.FeedbackInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Feedback record.

        Parameters
        ----------
        where
            Feedback filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Feedback model

        Returns
        -------
        prisma.models.Feedback
            The deleted Feedback record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        feedback = await Feedback.prisma().delete(
            where={
                'email': 'bagcfbhiig',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.FeedbackWhereUniqueInput,
        include: Optional[types.FeedbackInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Feedback record.

        Parameters
        ----------
        where
            Feedback filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Feedback model

        Returns
        -------
        prisma.models.Feedback
            The found Feedback record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        feedback = await Feedback.prisma().find_unique(
            where={
                'email': 'cghideieh',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.FeedbackWhereUniqueInput,
        include: Optional[types.FeedbackInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Feedback record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Feedback filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Feedback model

        Returns
        -------
        prisma.models.Feedback
            The found Feedback record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        feedback = await Feedback.prisma().find_unique_or_raise(
            where={
                'email': 'biabhbdai',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.FeedbackWhereInput] = None,
        cursor: Optional[types.FeedbackWhereUniqueInput] = None,
        include: Optional[types.FeedbackInclude] = None,
        order: Optional[Union[types.FeedbackOrderByInput, List[types.FeedbackOrderByInput]]] = None,
        distinct: Optional[List[types.FeedbackScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Feedback records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Feedback records returned
        skip
            Ignore the first N results
        where
            Feedback filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Feedback model
        order
            Order the returned Feedback records by any field
        distinct
            Filter Feedback records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Feedback]
            The list of all Feedback records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Feedback records
        feedbacks = await Feedback.prisma().find_many(take=10)

        # find the first 5 Feedback records ordered by the email field
        feedbacks = await Feedback.prisma().find_many(
            take=5,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.FeedbackWhereInput] = None,
        cursor: Optional[types.FeedbackWhereUniqueInput] = None,
        include: Optional[types.FeedbackInclude] = None,
        order: Optional[Union[types.FeedbackOrderByInput, List[types.FeedbackOrderByInput]]] = None,
        distinct: Optional[List[types.FeedbackScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Feedback record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Feedback filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Feedback model
        order
            Order the returned Feedback records by any field
        distinct
            Filter Feedback records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Feedback
            The first Feedback record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Feedback record ordered by the content field
        feedback = await Feedback.prisma().find_first(
            skip=1,
            order={
                'content': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.FeedbackWhereInput] = None,
        cursor: Optional[types.FeedbackWhereUniqueInput] = None,
        include: Optional[types.FeedbackInclude] = None,
        order: Optional[Union[types.FeedbackOrderByInput, List[types.FeedbackOrderByInput]]] = None,
        distinct: Optional[List[types.FeedbackScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Feedback record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Feedback filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Feedback model
        order
            Order the returned Feedback records by any field
        distinct
            Filter Feedback records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Feedback
            The first Feedback record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Feedback record ordered by the email field
        feedback = await Feedback.prisma().find_first_or_raise(
            skip=1,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.FeedbackUpdateInput,
        where: types.FeedbackWhereUniqueInput,
        include: Optional[types.FeedbackInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Feedback record.

        Parameters
        ----------
        data
            Feedback record data specifying what to update
        where
            Feedback filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Feedback model

        Returns
        -------
        prisma.models.Feedback
            The updated Feedback record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        feedback = await Feedback.prisma().update(
            where={
                'email': 'idghgaicb',
            },
            data={
                # data to update the Feedback record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.FeedbackWhereUniqueInput,
        data: types.FeedbackUpsertInput,
        include: Optional[types.FeedbackInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Feedback filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Feedback model

        Returns
        -------
        prisma.models.Feedback
            The created or updated Feedback record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        feedback = await Feedback.prisma().upsert(
            where={
                'email': 'fjfddhigg',
            },
            data={
                'create': {
                    'email': 'fjfddhigg',
                    'content': 'eigcfgbif',
                },
                'update': {
                    'content': 'eigcfgbif',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.FeedbackUpdateManyMutationInput,
        where: types.FeedbackWhereInput,
    ) -> int:
        """Update multiple Feedback records

        Parameters
        ----------
        data
            Feedback data to update the selected Feedback records to
        where
            Filter to select the Feedback records to update

        Returns
        -------
        int
            The total number of Feedback records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Feedback records
        total = await Feedback.prisma().update_many(
            data={
                'content': 'hjaecfifb'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.FeedbackWhereInput] = None,
        cursor: Optional[types.FeedbackWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Feedback records present in the database

        Parameters
        ----------
        select
            Select the Feedback fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Feedback filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.FeedbackCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Feedback.prisma().count()

        # results: prisma.types.FeedbackCountAggregateOutput
        results = await Feedback.prisma().count(
            select={
                '_all': True,
                'email': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.FeedbackCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.FeedbackWhereInput] = None,
        cursor: Optional[types.FeedbackWhereUniqueInput] = None,
    ) -> types.FeedbackCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.FeedbackCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.FeedbackWhereInput] = None,
        cursor: Optional[types.FeedbackWhereUniqueInput] = None,
    ) -> Union[int, types.FeedbackCountAggregateOutput]:
        """Count the number of Feedback records present in the database

        Parameters
        ----------
        select
            Select the Feedback fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Feedback filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.FeedbackCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Feedback.prisma().count()

        # results: prisma.types.FeedbackCountAggregateOutput
        results = await Feedback.prisma().count(
            select={
                '_all': True,
                'content': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.FeedbackCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.FeedbackWhereInput] = None
    ) -> int:
        """Delete multiple Feedback records.

        Parameters
        ----------
        where
            Optional Feedback filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Feedback records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Feedback records
        total = await Feedback.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.FeedbackScalarFieldKeys'],
        *,
        where: Optional['types.FeedbackWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.FeedbackAvgAggregateInput'] = None,
        sum: Optional['types.FeedbackSumAggregateInput'] = None,
        min: Optional['types.FeedbackMinAggregateInput'] = None,
        max: Optional['types.FeedbackMaxAggregateInput'] = None,
        having: Optional['types.FeedbackScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.FeedbackCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.FeedbackScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.FeedbackScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.FeedbackGroupByOutput']:
        """Group Feedback records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Feedback fields to group records by
        where
            Feedback filter to select records
        take
            Limit the maximum number of Feedback records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.FeedbackGroupByOutput]
            A list of dictionaries representing the Feedback record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Feedback records by email values
        # and count how many records are in each group
        results = await Feedback.prisma().group_by(
            ['email'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class GHDataActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.GHData]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await GHData.prisma().query_raw(
            'SELECT * FROM GHData WHERE email = $1',
            'cbbbjbfcii',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.GHData
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await GHData.prisma().query_first(
            'SELECT * FROM GHData WHERE content = $1',
            'bbejhfidcb',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.GHDataCreateInput,
        include: Optional[types.GHDataInclude] = None
    ) -> _PrismaModelT:
        """Create a new GHData record.

        Parameters
        ----------
        data
            GHData record data
        include
            Specifies which relations should be loaded on the returned GHData model

        Returns
        -------
        prisma.models.GHData
            The created GHData record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a GHData record from just the required fields
        ghdata = await GHData.prisma().create(
            data={
                # data to create a GHData record
                'email': 'bgeecijdgg',
                'content': 'bdiicjafbj',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.GHDataCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple GHData records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of GHData record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await GHData.prisma().create_many(
            data=[
                {
                    # data to create a GHData record
                    'email': 'bgehebiafc',
                    'content': 'bghffegacj',
                },
                {
                    # data to create a GHData record
                    'email': 'bhghchehcc',
                    'content': 'dcgchcbbf',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.GHDataWhereUniqueInput,
        include: Optional[types.GHDataInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single GHData record.

        Parameters
        ----------
        where
            GHData filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned GHData model

        Returns
        -------
        prisma.models.GHData
            The deleted GHData record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        ghdata = await GHData.prisma().delete(
            where={
                'email': 'bdedcabahc',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.GHDataWhereUniqueInput,
        include: Optional[types.GHDataInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique GHData record.

        Parameters
        ----------
        where
            GHData filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned GHData model

        Returns
        -------
        prisma.models.GHData
            The found GHData record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        ghdata = await GHData.prisma().find_unique(
            where={
                'email': 'ghfhiafcb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.GHDataWhereUniqueInput,
        include: Optional[types.GHDataInclude] = None
    ) -> _PrismaModelT:
        """Find a unique GHData record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            GHData filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned GHData model

        Returns
        -------
        prisma.models.GHData
            The found GHData record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        ghdata = await GHData.prisma().find_unique_or_raise(
            where={
                'email': 'heejgedji',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GHDataWhereInput] = None,
        cursor: Optional[types.GHDataWhereUniqueInput] = None,
        include: Optional[types.GHDataInclude] = None,
        order: Optional[Union[types.GHDataOrderByInput, List[types.GHDataOrderByInput]]] = None,
        distinct: Optional[List[types.GHDataScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple GHData records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of GHData records returned
        skip
            Ignore the first N results
        where
            GHData filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GHData model
        order
            Order the returned GHData records by any field
        distinct
            Filter GHData records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.GHData]
            The list of all GHData records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 GHData records
        ghdatas = await GHData.prisma().find_many(take=10)

        # find the first 5 GHData records ordered by the email field
        ghdatas = await GHData.prisma().find_many(
            take=5,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GHDataWhereInput] = None,
        cursor: Optional[types.GHDataWhereUniqueInput] = None,
        include: Optional[types.GHDataInclude] = None,
        order: Optional[Union[types.GHDataOrderByInput, List[types.GHDataOrderByInput]]] = None,
        distinct: Optional[List[types.GHDataScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single GHData record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            GHData filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GHData model
        order
            Order the returned GHData records by any field
        distinct
            Filter GHData records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.GHData
            The first GHData record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second GHData record ordered by the content field
        ghdata = await GHData.prisma().find_first(
            skip=1,
            order={
                'content': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.GHDataWhereInput] = None,
        cursor: Optional[types.GHDataWhereUniqueInput] = None,
        include: Optional[types.GHDataInclude] = None,
        order: Optional[Union[types.GHDataOrderByInput, List[types.GHDataOrderByInput]]] = None,
        distinct: Optional[List[types.GHDataScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single GHData record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            GHData filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned GHData model
        order
            Order the returned GHData records by any field
        distinct
            Filter GHData records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.GHData
            The first GHData record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second GHData record ordered by the email field
        ghdata = await GHData.prisma().find_first_or_raise(
            skip=1,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.GHDataUpdateInput,
        where: types.GHDataWhereUniqueInput,
        include: Optional[types.GHDataInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single GHData record.

        Parameters
        ----------
        data
            GHData record data specifying what to update
        where
            GHData filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned GHData model

        Returns
        -------
        prisma.models.GHData
            The updated GHData record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        ghdata = await GHData.prisma().update(
            where={
                'email': 'bjgjgibgbf',
            },
            data={
                # data to update the GHData record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.GHDataWhereUniqueInput,
        data: types.GHDataUpsertInput,
        include: Optional[types.GHDataInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            GHData filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned GHData model

        Returns
        -------
        prisma.models.GHData
            The created or updated GHData record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        ghdata = await GHData.prisma().upsert(
            where={
                'email': 'bbbgbhfjge',
            },
            data={
                'create': {
                    'email': 'bbbgbhfjge',
                    'content': 'dcgchcbbf',
                },
                'update': {
                    'content': 'dcgchcbbf',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.GHDataUpdateManyMutationInput,
        where: types.GHDataWhereInput,
    ) -> int:
        """Update multiple GHData records

        Parameters
        ----------
        data
            GHData data to update the selected GHData records to
        where
            Filter to select the GHData records to update

        Returns
        -------
        int
            The total number of GHData records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all GHData records
        total = await GHData.prisma().update_many(
            data={
                'content': 'igbehcbab'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GHDataWhereInput] = None,
        cursor: Optional[types.GHDataWhereUniqueInput] = None,
    ) -> int:
        """Count the number of GHData records present in the database

        Parameters
        ----------
        select
            Select the GHData fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            GHData filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GHDataCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await GHData.prisma().count()

        # results: prisma.types.GHDataCountAggregateOutput
        results = await GHData.prisma().count(
            select={
                '_all': True,
                'email': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.GHDataCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GHDataWhereInput] = None,
        cursor: Optional[types.GHDataWhereUniqueInput] = None,
    ) -> types.GHDataCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.GHDataCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.GHDataWhereInput] = None,
        cursor: Optional[types.GHDataWhereUniqueInput] = None,
    ) -> Union[int, types.GHDataCountAggregateOutput]:
        """Count the number of GHData records present in the database

        Parameters
        ----------
        select
            Select the GHData fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            GHData filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.GHDataCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await GHData.prisma().count()

        # results: prisma.types.GHDataCountAggregateOutput
        results = await GHData.prisma().count(
            select={
                '_all': True,
                'content': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.GHDataCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.GHDataWhereInput] = None
    ) -> int:
        """Delete multiple GHData records.

        Parameters
        ----------
        where
            Optional GHData filter to find the records to be deleted

        Returns
        -------
        int
            The total number of GHData records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all GHData records
        total = await GHData.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.GHDataScalarFieldKeys'],
        *,
        where: Optional['types.GHDataWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.GHDataAvgAggregateInput'] = None,
        sum: Optional['types.GHDataSumAggregateInput'] = None,
        min: Optional['types.GHDataMinAggregateInput'] = None,
        max: Optional['types.GHDataMaxAggregateInput'] = None,
        having: Optional['types.GHDataScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.GHDataCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.GHDataScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.GHDataScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.GHDataGroupByOutput']:
        """Group GHData records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar GHData fields to group records by
        where
            GHData filter to select records
        take
            Limit the maximum number of GHData records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.GHDataGroupByOutput]
            A list of dictionaries representing the GHData record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group GHData records by email values
        # and count how many records are in each group
        results = await GHData.prisma().group_by(
            ['email'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class KnowledgeBaseActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.KnowledgeBase]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await KnowledgeBase.prisma().query_raw(
            'SELECT * FROM KnowledgeBase WHERE email = $1',
            'bdadaadhag',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.KnowledgeBase
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await KnowledgeBase.prisma().query_first(
            'SELECT * FROM KnowledgeBase WHERE post = $1',
            'bgiggdidbf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.KnowledgeBaseCreateInput,
        include: Optional[types.KnowledgeBaseInclude] = None
    ) -> _PrismaModelT:
        """Create a new KnowledgeBase record.

        Parameters
        ----------
        data
            KnowledgeBase record data
        include
            Specifies which relations should be loaded on the returned KnowledgeBase model

        Returns
        -------
        prisma.models.KnowledgeBase
            The created KnowledgeBase record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a KnowledgeBase record from just the required fields
        knowledgebase = await KnowledgeBase.prisma().create(
            data={
                # data to create a KnowledgeBase record
                'email': 'caaaedabfc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.KnowledgeBaseCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple KnowledgeBase records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of KnowledgeBase record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await KnowledgeBase.prisma().create_many(
            data=[
                {
                    # data to create a KnowledgeBase record
                    'email': 'bigibebcib',
                },
                {
                    # data to create a KnowledgeBase record
                    'email': 'bigaiehgcc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.KnowledgeBaseWhereUniqueInput,
        include: Optional[types.KnowledgeBaseInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single KnowledgeBase record.

        Parameters
        ----------
        where
            KnowledgeBase filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned KnowledgeBase model

        Returns
        -------
        prisma.models.KnowledgeBase
            The deleted KnowledgeBase record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        knowledgebase = await KnowledgeBase.prisma().delete(
            where={
                'email': 'beeifcbebf',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.KnowledgeBaseWhereUniqueInput,
        include: Optional[types.KnowledgeBaseInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique KnowledgeBase record.

        Parameters
        ----------
        where
            KnowledgeBase filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned KnowledgeBase model

        Returns
        -------
        prisma.models.KnowledgeBase
            The found KnowledgeBase record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        knowledgebase = await KnowledgeBase.prisma().find_unique(
            where={
                'email': 'bgcigfahea',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.KnowledgeBaseWhereUniqueInput,
        include: Optional[types.KnowledgeBaseInclude] = None
    ) -> _PrismaModelT:
        """Find a unique KnowledgeBase record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            KnowledgeBase filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned KnowledgeBase model

        Returns
        -------
        prisma.models.KnowledgeBase
            The found KnowledgeBase record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        knowledgebase = await KnowledgeBase.prisma().find_unique_or_raise(
            where={
                'email': 'bcejgaggif',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.KnowledgeBaseWhereInput] = None,
        cursor: Optional[types.KnowledgeBaseWhereUniqueInput] = None,
        include: Optional[types.KnowledgeBaseInclude] = None,
        order: Optional[Union[types.KnowledgeBaseOrderByInput, List[types.KnowledgeBaseOrderByInput]]] = None,
        distinct: Optional[List[types.KnowledgeBaseScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple KnowledgeBase records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of KnowledgeBase records returned
        skip
            Ignore the first N results
        where
            KnowledgeBase filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned KnowledgeBase model
        order
            Order the returned KnowledgeBase records by any field
        distinct
            Filter KnowledgeBase records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.KnowledgeBase]
            The list of all KnowledgeBase records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 KnowledgeBase records
        knowledgebases = await KnowledgeBase.prisma().find_many(take=10)

        # find the first 5 KnowledgeBase records ordered by the resume field
        knowledgebases = await KnowledgeBase.prisma().find_many(
            take=5,
            order={
                'resume': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.KnowledgeBaseWhereInput] = None,
        cursor: Optional[types.KnowledgeBaseWhereUniqueInput] = None,
        include: Optional[types.KnowledgeBaseInclude] = None,
        order: Optional[Union[types.KnowledgeBaseOrderByInput, List[types.KnowledgeBaseOrderByInput]]] = None,
        distinct: Optional[List[types.KnowledgeBaseScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single KnowledgeBase record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            KnowledgeBase filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned KnowledgeBase model
        order
            Order the returned KnowledgeBase records by any field
        distinct
            Filter KnowledgeBase records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.KnowledgeBase
            The first KnowledgeBase record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second KnowledgeBase record ordered by the email field
        knowledgebase = await KnowledgeBase.prisma().find_first(
            skip=1,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.KnowledgeBaseWhereInput] = None,
        cursor: Optional[types.KnowledgeBaseWhereUniqueInput] = None,
        include: Optional[types.KnowledgeBaseInclude] = None,
        order: Optional[Union[types.KnowledgeBaseOrderByInput, List[types.KnowledgeBaseOrderByInput]]] = None,
        distinct: Optional[List[types.KnowledgeBaseScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single KnowledgeBase record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            KnowledgeBase filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned KnowledgeBase model
        order
            Order the returned KnowledgeBase records by any field
        distinct
            Filter KnowledgeBase records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.KnowledgeBase
            The first KnowledgeBase record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second KnowledgeBase record ordered by the post field
        knowledgebase = await KnowledgeBase.prisma().find_first_or_raise(
            skip=1,
            order={
                'post': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.KnowledgeBaseUpdateInput,
        where: types.KnowledgeBaseWhereUniqueInput,
        include: Optional[types.KnowledgeBaseInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single KnowledgeBase record.

        Parameters
        ----------
        data
            KnowledgeBase record data specifying what to update
        where
            KnowledgeBase filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned KnowledgeBase model

        Returns
        -------
        prisma.models.KnowledgeBase
            The updated KnowledgeBase record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        knowledgebase = await KnowledgeBase.prisma().update(
            where={
                'email': 'idfjadbcc',
            },
            data={
                # data to update the KnowledgeBase record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.KnowledgeBaseWhereUniqueInput,
        data: types.KnowledgeBaseUpsertInput,
        include: Optional[types.KnowledgeBaseInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            KnowledgeBase filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned KnowledgeBase model

        Returns
        -------
        prisma.models.KnowledgeBase
            The created or updated KnowledgeBase record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        knowledgebase = await KnowledgeBase.prisma().upsert(
            where={
                'email': 'hgdhbjhhj',
            },
            data={
                'create': {
                    'email': 'hgdhbjhhj',
                },
                'update': {
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.KnowledgeBaseUpdateManyMutationInput,
        where: types.KnowledgeBaseWhereInput,
    ) -> int:
        """Update multiple KnowledgeBase records

        Parameters
        ----------
        data
            KnowledgeBase data to update the selected KnowledgeBase records to
        where
            Filter to select the KnowledgeBase records to update

        Returns
        -------
        int
            The total number of KnowledgeBase records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all KnowledgeBase records
        total = await KnowledgeBase.prisma().update_many(
            data={
                'resume': 'ecjjjfbae'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.KnowledgeBaseWhereInput] = None,
        cursor: Optional[types.KnowledgeBaseWhereUniqueInput] = None,
    ) -> int:
        """Count the number of KnowledgeBase records present in the database

        Parameters
        ----------
        select
            Select the KnowledgeBase fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            KnowledgeBase filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.KnowledgeBaseCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await KnowledgeBase.prisma().count()

        # results: prisma.types.KnowledgeBaseCountAggregateOutput
        results = await KnowledgeBase.prisma().count(
            select={
                '_all': True,
                'email': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.KnowledgeBaseCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.KnowledgeBaseWhereInput] = None,
        cursor: Optional[types.KnowledgeBaseWhereUniqueInput] = None,
    ) -> types.KnowledgeBaseCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.KnowledgeBaseCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.KnowledgeBaseWhereInput] = None,
        cursor: Optional[types.KnowledgeBaseWhereUniqueInput] = None,
    ) -> Union[int, types.KnowledgeBaseCountAggregateOutput]:
        """Count the number of KnowledgeBase records present in the database

        Parameters
        ----------
        select
            Select the KnowledgeBase fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            KnowledgeBase filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.KnowledgeBaseCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await KnowledgeBase.prisma().count()

        # results: prisma.types.KnowledgeBaseCountAggregateOutput
        results = await KnowledgeBase.prisma().count(
            select={
                '_all': True,
                'post': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.KnowledgeBaseCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.KnowledgeBaseWhereInput] = None
    ) -> int:
        """Delete multiple KnowledgeBase records.

        Parameters
        ----------
        where
            Optional KnowledgeBase filter to find the records to be deleted

        Returns
        -------
        int
            The total number of KnowledgeBase records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all KnowledgeBase records
        total = await KnowledgeBase.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.KnowledgeBaseScalarFieldKeys'],
        *,
        where: Optional['types.KnowledgeBaseWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.KnowledgeBaseAvgAggregateInput'] = None,
        sum: Optional['types.KnowledgeBaseSumAggregateInput'] = None,
        min: Optional['types.KnowledgeBaseMinAggregateInput'] = None,
        max: Optional['types.KnowledgeBaseMaxAggregateInput'] = None,
        having: Optional['types.KnowledgeBaseScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.KnowledgeBaseCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.KnowledgeBaseScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.KnowledgeBaseScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.KnowledgeBaseGroupByOutput']:
        """Group KnowledgeBase records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar KnowledgeBase fields to group records by
        where
            KnowledgeBase filter to select records
        take
            Limit the maximum number of KnowledgeBase records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.KnowledgeBaseGroupByOutput]
            A list of dictionaries representing the KnowledgeBase record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group KnowledgeBase records by resume values
        # and count how many records are in each group
        results = await KnowledgeBase.prisma().group_by(
            ['resume'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.User]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await User.prisma().query_raw(
            'SELECT * FROM User WHERE id = $1',
            1775811865,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.User
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().query_first(
            'SELECT * FROM User WHERE username = $1',
            'ijdbeffgg',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserCreateInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Create a new User record.

        Parameters
        ----------
        data
            User record data
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created User record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a User record from just the required fields
        user = await User.prisma().create(
            data={
                # data to create a User record
                'email': 'jjfeafhfj',
                'password': 'cbachdgfce',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple User records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of User record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await User.prisma().create_many(
            data=[
                {
                    # data to create a User record
                    'email': 'chbfcacbd',
                    'password': 'efggddide',
                },
                {
                    # data to create a User record
                    'email': 'caficfigfb',
                    'password': 'bfidgijfjc',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single User record.

        Parameters
        ----------
        where
            User filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The deleted User record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().delete(
            where={
                'id': 878442065,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique User record.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique(
            where={
                'id': 1675280054,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> _PrismaModelT:
        """Find a unique User record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            User filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The found User record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().find_unique_or_raise(
            where={
                'id': 1627576247,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple User records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N results
        where
            User filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.User]
            The list of all User records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 User records
        users = await User.prisma().find_many(take=10)

        # find the first 5 User records ordered by the email field
        users = await User.prisma().find_many(
            take=5,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single User record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the password field
        user = await User.prisma().find_first(
            skip=1,
            order={
                'password': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
        include: Optional[types.UserInclude] = None,
        order: Optional[Union[types.UserOrderByInput, List[types.UserOrderByInput]]] = None,
        distinct: Optional[List[types.UserScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single User record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            User filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned User model
        order
            Order the returned User records by any field
        distinct
            Filter User records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.User
            The first User record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second User record ordered by the id field
        user = await User.prisma().find_first_or_raise(
            skip=1,
            order={
                'id': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserUpdateInput,
        where: types.UserWhereUniqueInput,
        include: Optional[types.UserInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single User record.

        Parameters
        ----------
        data
            User record data specifying what to update
        where
            User filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The updated User record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await User.prisma().update(
            where={
                'id': 2054802212,
            },
            data={
                # data to update the User record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserWhereUniqueInput,
        data: types.UserUpsertInput,
        include: Optional[types.UserInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            User filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned User model

        Returns
        -------
        prisma.models.User
            The created or updated User record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        user = await User.prisma().upsert(
            where={
                'id': 60335757,
            },
            data={
                'create': {
                    'id': 60335757,
                    'email': 'caficfigfb',
                    'password': 'bfidgijfjc',
                },
                'update': {
                    'email': 'caficfigfb',
                    'password': 'bfidgijfjc',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserUpdateManyMutationInput,
        where: types.UserWhereInput,
    ) -> int:
        """Update multiple User records

        Parameters
        ----------
        data
            User data to update the selected User records to
        where
            Filter to select the User records to update

        Returns
        -------
        int
            The total number of User records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all User records
        total = await User.prisma().update_many(
            data={
                'username': 'gieegcbeg'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> int:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'email': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> types.UserCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserWhereInput] = None,
        cursor: Optional[types.UserWhereUniqueInput] = None,
    ) -> Union[int, types.UserCountAggregateOutput]:
        """Count the number of User records present in the database

        Parameters
        ----------
        select
            Select the User fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            User filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await User.prisma().count()

        # results: prisma.types.UserCountAggregateOutput
        results = await User.prisma().count(
            select={
                '_all': True,
                'password': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserWhereInput] = None
    ) -> int:
        """Delete multiple User records.

        Parameters
        ----------
        where
            Optional User filter to find the records to be deleted

        Returns
        -------
        int
            The total number of User records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all User records
        total = await User.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserScalarFieldKeys'],
        *,
        where: Optional['types.UserWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserAvgAggregateInput'] = None,
        sum: Optional['types.UserSumAggregateInput'] = None,
        min: Optional['types.UserMinAggregateInput'] = None,
        max: Optional['types.UserMaxAggregateInput'] = None,
        having: Optional['types.UserScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserGroupByOutput']:
        """Group User records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar User fields to group records by
        where
            User filter to select records
        take
            Limit the maximum number of User records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserGroupByOutput]
            A list of dictionaries representing the User record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group User records by id values
        # and count how many records are in each group
        results = await User.prisma().group_by(
            ['id'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserInsightsActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.UserInsights]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await UserInsights.prisma().query_raw(
            'SELECT * FROM UserInsights WHERE email = $1',
            'bgcffadich',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.UserInsights
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await UserInsights.prisma().query_first(
            'SELECT * FROM UserInsights WHERE content = $1',
            'fcbichhci',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserInsightsCreateInput,
        include: Optional[types.UserInsightsInclude] = None
    ) -> _PrismaModelT:
        """Create a new UserInsights record.

        Parameters
        ----------
        data
            UserInsights record data
        include
            Specifies which relations should be loaded on the returned UserInsights model

        Returns
        -------
        prisma.models.UserInsights
            The created UserInsights record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a UserInsights record from just the required fields
        userinsights = await UserInsights.prisma().create(
            data={
                # data to create a UserInsights record
                'email': 'bcggadccgf',
                'content': 'jdcfdcgc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserInsightsCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple UserInsights records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of UserInsights record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await UserInsights.prisma().create_many(
            data=[
                {
                    # data to create a UserInsights record
                    'email': 'cafdaehjid',
                    'content': 'gifdddbia',
                },
                {
                    # data to create a UserInsights record
                    'email': 'bchehecef',
                    'content': 'jeijcbhfe',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserInsightsWhereUniqueInput,
        include: Optional[types.UserInsightsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single UserInsights record.

        Parameters
        ----------
        where
            UserInsights filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned UserInsights model

        Returns
        -------
        prisma.models.UserInsights
            The deleted UserInsights record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userinsights = await UserInsights.prisma().delete(
            where={
                'email': 'bjgejjabff',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserInsightsWhereUniqueInput,
        include: Optional[types.UserInsightsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique UserInsights record.

        Parameters
        ----------
        where
            UserInsights filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserInsights model

        Returns
        -------
        prisma.models.UserInsights
            The found UserInsights record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userinsights = await UserInsights.prisma().find_unique(
            where={
                'email': 'bcciijbibg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserInsightsWhereUniqueInput,
        include: Optional[types.UserInsightsInclude] = None
    ) -> _PrismaModelT:
        """Find a unique UserInsights record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            UserInsights filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserInsights model

        Returns
        -------
        prisma.models.UserInsights
            The found UserInsights record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userinsights = await UserInsights.prisma().find_unique_or_raise(
            where={
                'email': 'cffcachfd',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserInsightsWhereInput] = None,
        cursor: Optional[types.UserInsightsWhereUniqueInput] = None,
        include: Optional[types.UserInsightsInclude] = None,
        order: Optional[Union[types.UserInsightsOrderByInput, List[types.UserInsightsOrderByInput]]] = None,
        distinct: Optional[List[types.UserInsightsScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple UserInsights records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of UserInsights records returned
        skip
            Ignore the first N results
        where
            UserInsights filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserInsights model
        order
            Order the returned UserInsights records by any field
        distinct
            Filter UserInsights records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.UserInsights]
            The list of all UserInsights records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 UserInsights records
        userinsights = await UserInsights.prisma().find_many(take=10)

        # find the first 5 UserInsights records ordered by the email field
        userinsights = await UserInsights.prisma().find_many(
            take=5,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserInsightsWhereInput] = None,
        cursor: Optional[types.UserInsightsWhereUniqueInput] = None,
        include: Optional[types.UserInsightsInclude] = None,
        order: Optional[Union[types.UserInsightsOrderByInput, List[types.UserInsightsOrderByInput]]] = None,
        distinct: Optional[List[types.UserInsightsScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single UserInsights record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserInsights filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserInsights model
        order
            Order the returned UserInsights records by any field
        distinct
            Filter UserInsights records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserInsights
            The first UserInsights record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserInsights record ordered by the content field
        userinsights = await UserInsights.prisma().find_first(
            skip=1,
            order={
                'content': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserInsightsWhereInput] = None,
        cursor: Optional[types.UserInsightsWhereUniqueInput] = None,
        include: Optional[types.UserInsightsInclude] = None,
        order: Optional[Union[types.UserInsightsOrderByInput, List[types.UserInsightsOrderByInput]]] = None,
        distinct: Optional[List[types.UserInsightsScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single UserInsights record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserInsights filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserInsights model
        order
            Order the returned UserInsights records by any field
        distinct
            Filter UserInsights records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserInsights
            The first UserInsights record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserInsights record ordered by the email field
        userinsights = await UserInsights.prisma().find_first_or_raise(
            skip=1,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserInsightsUpdateInput,
        where: types.UserInsightsWhereUniqueInput,
        include: Optional[types.UserInsightsInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single UserInsights record.

        Parameters
        ----------
        data
            UserInsights record data specifying what to update
        where
            UserInsights filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned UserInsights model

        Returns
        -------
        prisma.models.UserInsights
            The updated UserInsights record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        userinsights = await UserInsights.prisma().update(
            where={
                'email': 'bccdfhdigc',
            },
            data={
                # data to update the UserInsights record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserInsightsWhereUniqueInput,
        data: types.UserInsightsUpsertInput,
        include: Optional[types.UserInsightsInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            UserInsights filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned UserInsights model

        Returns
        -------
        prisma.models.UserInsights
            The created or updated UserInsights record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        userinsights = await UserInsights.prisma().upsert(
            where={
                'email': 'febcgjbfj',
            },
            data={
                'create': {
                    'email': 'febcgjbfj',
                    'content': 'jeijcbhfe',
                },
                'update': {
                    'content': 'jeijcbhfe',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserInsightsUpdateManyMutationInput,
        where: types.UserInsightsWhereInput,
    ) -> int:
        """Update multiple UserInsights records

        Parameters
        ----------
        data
            UserInsights data to update the selected UserInsights records to
        where
            Filter to select the UserInsights records to update

        Returns
        -------
        int
            The total number of UserInsights records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all UserInsights records
        total = await UserInsights.prisma().update_many(
            data={
                'content': 'bageiegghg'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserInsightsWhereInput] = None,
        cursor: Optional[types.UserInsightsWhereUniqueInput] = None,
    ) -> int:
        """Count the number of UserInsights records present in the database

        Parameters
        ----------
        select
            Select the UserInsights fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserInsights filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserInsightsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserInsights.prisma().count()

        # results: prisma.types.UserInsightsCountAggregateOutput
        results = await UserInsights.prisma().count(
            select={
                '_all': True,
                'email': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserInsightsCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserInsightsWhereInput] = None,
        cursor: Optional[types.UserInsightsWhereUniqueInput] = None,
    ) -> types.UserInsightsCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserInsightsCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserInsightsWhereInput] = None,
        cursor: Optional[types.UserInsightsWhereUniqueInput] = None,
    ) -> Union[int, types.UserInsightsCountAggregateOutput]:
        """Count the number of UserInsights records present in the database

        Parameters
        ----------
        select
            Select the UserInsights fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserInsights filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserInsightsCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserInsights.prisma().count()

        # results: prisma.types.UserInsightsCountAggregateOutput
        results = await UserInsights.prisma().count(
            select={
                '_all': True,
                'content': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserInsightsCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserInsightsWhereInput] = None
    ) -> int:
        """Delete multiple UserInsights records.

        Parameters
        ----------
        where
            Optional UserInsights filter to find the records to be deleted

        Returns
        -------
        int
            The total number of UserInsights records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all UserInsights records
        total = await UserInsights.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserInsightsScalarFieldKeys'],
        *,
        where: Optional['types.UserInsightsWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserInsightsAvgAggregateInput'] = None,
        sum: Optional['types.UserInsightsSumAggregateInput'] = None,
        min: Optional['types.UserInsightsMinAggregateInput'] = None,
        max: Optional['types.UserInsightsMaxAggregateInput'] = None,
        having: Optional['types.UserInsightsScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserInsightsCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserInsightsScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserInsightsScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserInsightsGroupByOutput']:
        """Group UserInsights records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar UserInsights fields to group records by
        where
            UserInsights filter to select records
        take
            Limit the maximum number of UserInsights records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserInsightsGroupByOutput]
            A list of dictionaries representing the UserInsights record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group UserInsights records by email values
        # and count how many records are in each group
        results = await UserInsights.prisma().group_by(
            ['email'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class UserOnboardActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.UserOnboard]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await UserOnboard.prisma().query_raw(
            'SELECT * FROM UserOnboard WHERE email = $1',
            'faidicegb',
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.UserOnboard
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await UserOnboard.prisma().query_first(
            'SELECT * FROM UserOnboard WHERE content = $1',
            'bacecgfhbe',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.UserOnboardCreateInput,
        include: Optional[types.UserOnboardInclude] = None
    ) -> _PrismaModelT:
        """Create a new UserOnboard record.

        Parameters
        ----------
        data
            UserOnboard record data
        include
            Specifies which relations should be loaded on the returned UserOnboard model

        Returns
        -------
        prisma.models.UserOnboard
            The created UserOnboard record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a UserOnboard record from just the required fields
        useronboard = await UserOnboard.prisma().create(
            data={
                # data to create a UserOnboard record
                'email': 'ihcahiead',
                'content': 'biheheiajg',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.UserOnboardCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple UserOnboard records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of UserOnboard record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await UserOnboard.prisma().create_many(
            data=[
                {
                    # data to create a UserOnboard record
                    'email': 'jbgijghgb',
                    'content': 'hgjcghfbi',
                },
                {
                    # data to create a UserOnboard record
                    'email': 'icadbcehj',
                    'content': 'jchciaee',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.UserOnboardWhereUniqueInput,
        include: Optional[types.UserOnboardInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single UserOnboard record.

        Parameters
        ----------
        where
            UserOnboard filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned UserOnboard model

        Returns
        -------
        prisma.models.UserOnboard
            The deleted UserOnboard record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        useronboard = await UserOnboard.prisma().delete(
            where={
                'email': 'deeificjd',
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.UserOnboardWhereUniqueInput,
        include: Optional[types.UserOnboardInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique UserOnboard record.

        Parameters
        ----------
        where
            UserOnboard filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserOnboard model

        Returns
        -------
        prisma.models.UserOnboard
            The found UserOnboard record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        useronboard = await UserOnboard.prisma().find_unique(
            where={
                'email': 'bbcbhebbda',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.UserOnboardWhereUniqueInput,
        include: Optional[types.UserOnboardInclude] = None
    ) -> _PrismaModelT:
        """Find a unique UserOnboard record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            UserOnboard filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned UserOnboard model

        Returns
        -------
        prisma.models.UserOnboard
            The found UserOnboard record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        useronboard = await UserOnboard.prisma().find_unique_or_raise(
            where={
                'email': 'bejfijgcfb',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserOnboardWhereInput] = None,
        cursor: Optional[types.UserOnboardWhereUniqueInput] = None,
        include: Optional[types.UserOnboardInclude] = None,
        order: Optional[Union[types.UserOnboardOrderByInput, List[types.UserOnboardOrderByInput]]] = None,
        distinct: Optional[List[types.UserOnboardScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple UserOnboard records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of UserOnboard records returned
        skip
            Ignore the first N results
        where
            UserOnboard filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserOnboard model
        order
            Order the returned UserOnboard records by any field
        distinct
            Filter UserOnboard records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.UserOnboard]
            The list of all UserOnboard records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 UserOnboard records
        useronboards = await UserOnboard.prisma().find_many(take=10)

        # find the first 5 UserOnboard records ordered by the email field
        useronboards = await UserOnboard.prisma().find_many(
            take=5,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserOnboardWhereInput] = None,
        cursor: Optional[types.UserOnboardWhereUniqueInput] = None,
        include: Optional[types.UserOnboardInclude] = None,
        order: Optional[Union[types.UserOnboardOrderByInput, List[types.UserOnboardOrderByInput]]] = None,
        distinct: Optional[List[types.UserOnboardScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single UserOnboard record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserOnboard filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserOnboard model
        order
            Order the returned UserOnboard records by any field
        distinct
            Filter UserOnboard records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserOnboard
            The first UserOnboard record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserOnboard record ordered by the content field
        useronboard = await UserOnboard.prisma().find_first(
            skip=1,
            order={
                'content': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.UserOnboardWhereInput] = None,
        cursor: Optional[types.UserOnboardWhereUniqueInput] = None,
        include: Optional[types.UserOnboardInclude] = None,
        order: Optional[Union[types.UserOnboardOrderByInput, List[types.UserOnboardOrderByInput]]] = None,
        distinct: Optional[List[types.UserOnboardScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single UserOnboard record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            UserOnboard filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned UserOnboard model
        order
            Order the returned UserOnboard records by any field
        distinct
            Filter UserOnboard records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.UserOnboard
            The first UserOnboard record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second UserOnboard record ordered by the email field
        useronboard = await UserOnboard.prisma().find_first_or_raise(
            skip=1,
            order={
                'email': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.UserOnboardUpdateInput,
        where: types.UserOnboardWhereUniqueInput,
        include: Optional[types.UserOnboardInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single UserOnboard record.

        Parameters
        ----------
        data
            UserOnboard record data specifying what to update
        where
            UserOnboard filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned UserOnboard model

        Returns
        -------
        prisma.models.UserOnboard
            The updated UserOnboard record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        useronboard = await UserOnboard.prisma().update(
            where={
                'email': 'caifcbgii',
            },
            data={
                # data to update the UserOnboard record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.UserOnboardWhereUniqueInput,
        data: types.UserOnboardUpsertInput,
        include: Optional[types.UserOnboardInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            UserOnboard filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned UserOnboard model

        Returns
        -------
        prisma.models.UserOnboard
            The created or updated UserOnboard record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        useronboard = await UserOnboard.prisma().upsert(
            where={
                'email': 'igaibbfgj',
            },
            data={
                'create': {
                    'email': 'igaibbfgj',
                    'content': 'jchciaee',
                },
                'update': {
                    'content': 'jchciaee',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.UserOnboardUpdateManyMutationInput,
        where: types.UserOnboardWhereInput,
    ) -> int:
        """Update multiple UserOnboard records

        Parameters
        ----------
        data
            UserOnboard data to update the selected UserOnboard records to
        where
            Filter to select the UserOnboard records to update

        Returns
        -------
        int
            The total number of UserOnboard records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all UserOnboard records
        total = await UserOnboard.prisma().update_many(
            data={
                'content': 'bggajdcbbi'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserOnboardWhereInput] = None,
        cursor: Optional[types.UserOnboardWhereUniqueInput] = None,
    ) -> int:
        """Count the number of UserOnboard records present in the database

        Parameters
        ----------
        select
            Select the UserOnboard fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserOnboard filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserOnboardCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserOnboard.prisma().count()

        # results: prisma.types.UserOnboardCountAggregateOutput
        results = await UserOnboard.prisma().count(
            select={
                '_all': True,
                'email': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.UserOnboardCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserOnboardWhereInput] = None,
        cursor: Optional[types.UserOnboardWhereUniqueInput] = None,
    ) -> types.UserOnboardCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.UserOnboardCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.UserOnboardWhereInput] = None,
        cursor: Optional[types.UserOnboardWhereUniqueInput] = None,
    ) -> Union[int, types.UserOnboardCountAggregateOutput]:
        """Count the number of UserOnboard records present in the database

        Parameters
        ----------
        select
            Select the UserOnboard fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            UserOnboard filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.UserOnboardCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await UserOnboard.prisma().count()

        # results: prisma.types.UserOnboardCountAggregateOutput
        results = await UserOnboard.prisma().count(
            select={
                '_all': True,
                'content': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.UserOnboardCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.UserOnboardWhereInput] = None
    ) -> int:
        """Delete multiple UserOnboard records.

        Parameters
        ----------
        where
            Optional UserOnboard filter to find the records to be deleted

        Returns
        -------
        int
            The total number of UserOnboard records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all UserOnboard records
        total = await UserOnboard.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.UserOnboardScalarFieldKeys'],
        *,
        where: Optional['types.UserOnboardWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.UserOnboardAvgAggregateInput'] = None,
        sum: Optional['types.UserOnboardSumAggregateInput'] = None,
        min: Optional['types.UserOnboardMinAggregateInput'] = None,
        max: Optional['types.UserOnboardMaxAggregateInput'] = None,
        having: Optional['types.UserOnboardScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.UserOnboardCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.UserOnboardScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.UserOnboardScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.UserOnboardGroupByOutput']:
        """Group UserOnboard records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar UserOnboard fields to group records by
        where
            UserOnboard filter to select records
        take
            Limit the maximum number of UserOnboard records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.UserOnboardGroupByOutput]
            A list of dictionaries representing the UserOnboard record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group UserOnboard records by email values
        # and count how many records are in each group
        results = await UserOnboard.prisma().group_by(
            ['email'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models